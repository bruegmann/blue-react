$theme: #e5dff4 !default;

@function neu-shadow($multiplicate: 1, $inset: false, $switch: false) {
    $preset: "";
    $bg-suffix: "";

    @if $inset {
        $preset: "inset";
        $bg-suffix: "-inset";
    }

    @if $switch {
        @return $preset calc(var(--neu-distance) * #{$multiplicate}) calc(var(--neu-distance) * #{$multiplicate})
                calc(var(--neu-blur) * #{$multiplicate}) var(--neu-shadow-high#{$bg-suffix}),
            $preset calc(var(--neu-distance) * -#{$multiplicate}) calc(var(--neu-distance) * -#{$multiplicate})
                calc(var(--neu-blur) * #{$multiplicate}) var(--neu-shadow-low#{$bg-suffix});
    }

    @return $preset calc(var(--neu-distance) * -#{$multiplicate}) calc(var(--neu-distance) * -#{$multiplicate})
            calc(var(--neu-blur) * #{$multiplicate}) var(--neu-shadow-high#{$bg-suffix}),
        $preset calc(var(--neu-distance) * #{$multiplicate}) calc(var(--neu-distance) * #{$multiplicate})
            calc(var(--neu-blur) * #{$multiplicate}) var(--neu-shadow-low#{$bg-suffix});
}

$neu-steps: (
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3
);

@mixin neu($bg: $theme, $bg-inset: $theme) {
    --neu-bg: #{$bg};
    --neu-bg-inset: #{$bg-inset};

    --neu-shadow-high: #{lighten($bg, 3%)};
    --neu-shadow-low: #{darken($bg, 4%)};
    --neu-shadow-high-inset: #{lighten($bg-inset, 4%)};
    --neu-shadow-low-inset: #{darken($bg-inset, 4%)};

    --neu-distance: 0.37rem;
    --neu-blur: 0.7rem;

    @each $unit, $value in $neu-steps {
        --neu-shadow-#{$unit}: #{neu-shadow($value)};
        --neu-shadow-inset-#{$unit}: #{neu-shadow($value, true)};

        --neu-shadow-switch-#{$unit}: #{neu-shadow($value, false, true)};
        --neu-shadow-inset-switch-#{$unit}: #{neu-shadow($value, true, true)};
    }
}

@mixin neu-define-utility-classes() {
    @each $unit, $value in $neu-steps {
        .neu-shadow-#{$unit} {
            box-shadow: #{neu-shadow($value, $inset: false, $switch: false)} !important;

            @each $unit, $value in $neu-steps {
                &.neu-shadow-inset-#{$unit} {
                    box-shadow: #{neu-shadow($value, $inset: false, $switch: false)},
                        #{neu-shadow($value, $inset: true, $switch: false)} !important;
                }

                &.neu-shadow-inset-switch-#{$unit} {
                    box-shadow: #{neu-shadow($value, $inset: false, $switch: false)},
                        #{neu-shadow($value, $inset: true, $switch: true)} !important;
                }
            }
        }
        .neu-shadow-inset-#{$unit} {
            box-shadow: #{neu-shadow($value, $inset: true, $switch: false)} !important;
        }

        // Uncommented to reduce CSS size.
        // I don't see that `.neu-shadow-switch-#{$unit}` should be used in practice.
        // .neu-shadow-switch-#{$unit} {
        //     box-shadow: #{neu-shadow($value, $inset: false, $switch: true)} !important;
        // }
        .neu-shadow-inset-switch-#{$unit} {
            box-shadow: #{neu-shadow($value, $inset: true, $switch: true)} !important;
        }
    }
}

:root {
    @include neu();
}

@include neu-define-utility-classes();
