{"src\\components\\A.tsx":{"description":"The `<a>` element automatically sets `rel=\"noreferrer\"` for external links with `target=\"_blank\"`.\\\r\n`A` allows all props of the `<a>` element.\\\r\n`<A href=\"https://example.com\" target=\"_blank\">Example</A>` ➡️ `<a href=\"https://example.com\" target=\"_blank\" rel=\"noreferrer\">Example</a>`","displayName":"A","methods":[]},"src\\components\\ActionMenu.tsx":{"description":"The Action Menu on the top right of a page. You can place Actions here which are in context of the current page.","displayName":"ActionMenu","methods":[],"props":{"hideToggleAction":{"required":false,"tsType":{"name":"boolean"},"description":"Hides the toggle button in mobile view. Can be useful when using multiple ActionMenus and not show the toggle button for each menu."},"children":{"required":false,"tsType":{"name":"any"},"description":""},"toggleIcon":{"required":false,"tsType":{"name":"any"},"description":"Icon component for the toggle icon."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"break":{"required":false,"tsType":{"name":"union","raw":"breakOption | \"none\"","elements":[{"name":"breakOption"},{"name":"literal","value":"\"none\""}]},"description":"\"sm\" | \"md\" | \"lg\" | \"xl\" | \"none\". Default is \"lg\". The responsive breakpoint at which the menu will be shown as a dropdown."}},"exampleCode":"import { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function ActionMenuExample() {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const toggleIsChecked = () => setIsChecked(!isChecked)\r\n\r\n    const style = {\r\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex align-items-center mb-1\">\r\n                <div className=\"form-check form-switch d-inline-block w-auto\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        className=\"form-check-input\"\r\n                        role=\"switch\"\r\n                        id=\"Example-ActionMenu-checkbox\"\r\n                        onChange={toggleIsChecked}\r\n                    />\r\n                    <label htmlFor=\"Example-ActionMenu-checkbox\">Mobile</label>\r\n                </div>\r\n                <Link to=\"/action-menu-example\" className=\"btn btn-link\">\r\n                    Open in full view\r\n                </Link>{\" \"}\r\n                <Link\r\n                    to=\"/action-menu-example\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"btn btn-link\"\r\n                >\r\n                    Open in new tab\r\n                </Link>\r\n            </div>\r\n            <div className=\"ratio ratio-16x9\">\r\n                <iframe\r\n                    src={`${import.meta.env.BASE_URL}/action-menu-example`}\r\n                    style={style}\r\n                    title=\"Actions Demo page\"\r\n                />\r\n                {/**\r\n                 * See the source code of the iframe page on:\r\n                 * https://github.com/bruegmann/blue-react/blob/master/src/docs/pages/ActionMenuExamplePage.tsx\r\n                 */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"},"src\\components\\Body.tsx":{"description":"Contains the content of the page.","displayName":"Body","methods":[],"props":{"id":{"required":false,"tsType":{"name":"string"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"containerClass":{"required":false,"tsType":{"name":"string"},"description":"Class name for the container. More info: https://getbootstrap.com/docs/4.0/layout/overview/#containers"},"hasActions":{"required":false,"tsType":{"name":"boolean"},"description":"Set `true` if this page uses `<Actions />`, so this component will get enough padding to avoid overlapping of the content."},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: any) => void","signature":{"arguments":[{"name":"event","type":{"name":"any"}}],"return":{"name":"void"}}},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Chevron.tsx":{"description":"Chevron icon component with open state.","displayName":"Chevron","methods":[],"props":{"open":{"required":false,"tsType":{"name":"boolean"},"description":"Indicates if open or not."},"mirrored":{"required":false,"tsType":{"name":"boolean"},"description":"By default the chevron points to the right when closed. Set mirrored and it will point to the left."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"style":{"required":false,"tsType":{"name":"CSSProperties"},"description":""}},"examples":{"Basic usage.tsx":"import { useState } from \"react\"\r\nimport { Chevron } from \"blue-react\"\r\n\r\nexport default function ChevronExample() {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className=\"btn btn-secondary me-3\"\r\n                onClick={() => setIsOpen(!isOpen)}\r\n            >\r\n                <Chevron open={isOpen} /> Click to toggle the chevron\r\n            </button>\r\n\r\n            <button\r\n                className=\"btn btn-secondary\"\r\n                onClick={() => setIsOpen(!isOpen)}\r\n            >\r\n                Chevron on the right side <Chevron open={isOpen} mirrored />\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n"}},"src\\components\\HashRouter.tsx":{"description":"Component for simple hash routing. It's recommended to use solutions like `react-router-dom` for more complex routing.\r\n\r\nAs soon this component is mounted, it is globally available under `window.blueHashRouterRef`.\r\nYou can also append your own event listeners.\r\n\r\nAllowed events:\r\n\r\n* **componentDidUpdate** - Component was updated.\r\n  Example: `window.blueHashRouterRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })`\r\n* **pageDidShowAgain** - Page appeared again with the same old state. In the callback function you can reinitialize things.\r\n  Example: `window.blueHashRouterRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })`\r\n* **pageDidHide** - This page disappeared and another page appears instead.\r\n  Example: `window.blueHashRouterRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })`\r\n\r\nMethod to add event listeners:\r\n* `window.blueHashRouterRef.`**addEventListener**`(eventName: string, param2: any, param3: any, listenerId?: string)`\r\n\r\nMethods to remove event listeners:\r\n* `window.blueHashRouterRef.`**removeEventListener**`(eventName: string, listenerId: string)`\r\n* `window.blueHashRouterRef.`**removeDuplicatedEventListeners**`()` - Will automatically be called when running `addEventListener`","displayName":"HashRouter","methods":[{"name":"onHashChange","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"defaultProps","docblock":null,"modifiers":["static","get"],"params":[],"returns":null},{"name":"initMatch","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"addEventListener","docblock":null,"modifiers":[],"params":[{"name":"param1","type":{"name":"any"}},{"name":"param2","type":{"name":"any"}},{"name":"param3","type":{"name":"any"}},{"name":"listenerId","optional":true,"type":{"name":"string"}}],"returns":null},{"name":"removeEventListener","docblock":null,"modifiers":[],"params":[{"name":"type","type":{"name":"string"}},{"name":"listenerId","type":{"name":"string"}}],"returns":null},{"name":"removeDuplicatedEventListeners","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"pages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{ name: string; component: ReactNode }","signature":{"properties":[{"key":"name","value":{"name":"string","required":true}},{"key":"component","value":{"name":"ReactNode","required":true}}]}}],"raw":"{ name: string; component: ReactNode }[]"},"description":"Registers pages for the built-in routing system. Example: `[{name: \"home\", component: <HomePage />}]`"},"unrouteable":{"required":false,"tsType":{"name":"boolean"},"description":"When `true`, always the \"home\" route will be rendered.","defaultValue":{"value":"false","computed":false}},"disableTitleSet":{"required":false,"tsType":{"name":"boolean"},"description":"By default, the document title will automatically set. Set this prop to `true` to disable this behaviour.","defaultValue":{"value":"false","computed":false}},"blockRouting":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\r\n    newMatch: string[],\r\n    currentMatch: string[]\r\n) => void | boolean","signature":{"arguments":[{"name":"newMatch","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}},{"name":"currentMatch","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}}],"return":{"name":"union","raw":"void | boolean","elements":[{"name":"void"},{"name":"boolean"}]}}},"description":"Define a function, that will be fired when switching routes. When your function returns `true`, the default route behaviour will be blocked.\r\nYou can use something like `window.blueHashRouterRef.setState({ blockRouting: onHashChange })` globally to set the value from anywhere in your app."},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Header.tsx":{"description":"The top of a page.","displayName":"Header","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"\"","computed":false}}}},"src\\components\\HeaderTitle.tsx":{"description":"The title area at the header bar.\r\nDepending on its content, the document's title will be set aswell (what will be shown in the browser title bar).","displayName":"HeaderTitle","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"logoAlt":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"Logo\"","computed":false}},"appTitle":{"required":false,"tsType":{"name":"string"},"description":"Text next to the logo."},"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends `className` from parent element."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is the component used on the sidebar?"},"elementType":{"required":false,"tsType":{"name":"any"},"description":"By default, MenuItem is a `\"a\"`.\r\nIf you want to have it another type, you can pass a component reference with this prop (e.g. `Link`).","defaultValue":{"value":"\"a\"","computed":false}},"to":{"required":false,"tsType":{"name":"string"},"description":"Sets `to` prop, e.g. when you use the `Link` component from React Router."},"href":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"#\"","computed":false}},"breadcrumb":{"required":false,"tsType":{"name":"Array","elements":[{"name":"ReactNode"}],"raw":"ReactNode[]"},"description":"Breadcrumb items to be shown."}},"examples":{"Breadcrumb.tsx":"import { Link } from \"react-router-dom\"\r\nimport { HeaderTitle } from \"blue-react\"\r\n\r\nexport default function BreadcrumbExample() {\r\n    return (\r\n        <HeaderTitle\r\n            breadcrumb={[\r\n                <Link to=\"/\">Home page</Link>,\r\n                <Link to=\"/component/HeaderTitle\">This component</Link>,\r\n                \"Current page\"\r\n            ]}\r\n        />\r\n    )\r\n}\r\n"}},"src\\components\\IconMenuItem.tsx":{"description":"Variant of `MenuItem` to primarily display an icon without a label.\r\nThe label prop will be displayed as a tooltip.","displayName":"IconMenuItem","methods":[],"props":{"outerClass":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"\"","computed":false}},"tooltipClass":{"required":false,"tsType":{"name":"string"},"description":"Tooltip will be placed to the end/right by default. You can change the direction with this prop.","defaultValue":{"value":"\"blue-tooltip-end\"","computed":false}},"horizontalOnOpenSidebar":{"required":false,"tsType":{"name":"boolean"},"description":"When used inside of the sidebar: active indicator will be displayed underneath instead of before.\r\nThe prop to `false` to disable this behavior.","defaultValue":{"value":"true","computed":false}},"className":{"defaultValue":{"value":"\"\"","computed":false},"required":false}},"composes":["MenuItemProps"],"exampleCode":"import { IconMenuItem, MenuItem, SidebarMenu } from \"blue-react\"\r\nimport { BoxArrowLeft, Gear, List, Person } from \"react-bootstrap-icons\"\r\n\r\nexport default function IconMenuItemExample() {\r\n    return (\r\n        <div className=\"bg-primary position-relative\">\r\n            <SidebarMenu\r\n                sidebarClass=\"position-static shadow-none overflow-visible\"\r\n                menuClass=\"overflow-visible\"\r\n                bottomContent={\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        <IconMenuItem\r\n                            href=\"#record\"\r\n                            outerClass=\"flex-fill\"\r\n                            label=\"User settings\"\r\n                            icon={<Person className=\"bi\" />}\r\n                        />\r\n\r\n                        <IconMenuItem href=\"#\" outerClass=\"flex-fill\" label=\"Settings\" icon={<Gear className=\"bi\" />} />\r\n\r\n                        <IconMenuItem\r\n                            href=\"#\"\r\n                            outerClass=\"flex-fill\"\r\n                            label=\"Sign out\"\r\n                            icon={<BoxArrowLeft className=\"bi\" />}\r\n                        />\r\n                    </div>\r\n                }\r\n            >\r\n                <MenuItem\r\n                    icon={<List className=\"bi\" />}\r\n                    label=\"Toggle menu\"\r\n                    onClick={() => {\r\n                        window.blueHashRouterRef.setState({\r\n                            expandSidebar: !window.blueHashRouterRef.state.expandSidebar\r\n                        })\r\n                    }}\r\n                />\r\n\r\n                <MenuItem icon={<span>😅</span>} label=\"Hello World\" />\r\n                <MenuItem icon={<span style={{ transform: \"scale(-1, 1)\" }}>👀</span>} label=\"Another normal item\" />\r\n            </SidebarMenu>\r\n        </div>\r\n    )\r\n}\r\n"},"src\\components\\Intro.tsx":{"description":"Can be used for a sign-in page.","displayName":"Intro","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"logoMaxWidth":{"required":false,"tsType":{"name":"string"},"description":"Max width from the logo.","defaultValue":{"value":"\"100px\"","computed":false}},"title":{"required":false,"tsType":{"name":"string"},"description":"Text which will be placed under the logo."},"children":{"required":false,"tsType":{"name":"any"},"description":"Content"}}},"src\\components\\Layout.tsx":{"description":"A layout with header, side and main content area. Side is collapsible.","displayName":"Layout","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"header":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"side":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"noPageBorder":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}}}},"src\\components\\MenuItem.tsx":{"description":"Link, button or custom component for Sidebar, Actions or ActionMenu","displayName":"MenuItem","methods":[],"props":{"to":{"required":false,"tsType":{"name":"string"},"description":"Sets `to` prop, e.g. when you use the `NavLink` component from React Router."},"exact":{"required":false,"tsType":{"name":"boolean"},"description":"Prop for components by React Router."},"href":{"required":false,"tsType":{"name":"string"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"}}],"return":{"name":"void"}}},"description":""},"onClickAttached":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"}}],"return":{"name":"void"}}},"description":"Will be fired after `onClick`"},"icon":{"required":false,"tsType":{"name":"any"},"description":"Icon component or a class name."},"iconClassName":{"required":false,"tsType":{"name":"string"},"description":"Addition to class name of icon wrapper element"},"iconForActive":{"required":false,"tsType":{"name":"any"},"description":"Icon component or a class name when the MenuItem is active."},"label":{"required":false,"tsType":{"name":"any"},"description":"Label of the link."},"labelClassName":{"required":false,"tsType":{"name":"string"},"description":"Addition to class name of label wrapper element"},"caretClassName":{"required":false,"tsType":{"name":"string"},"description":"Addition to class name of caret"},"caretStyle":{"required":false,"tsType":{"name":"CSSProperties"},"description":"Addition to style of caret"},"isActive":{"required":false,"tsType":{"name":"boolean"},"description":"Should be set as active."},"highlighted":{"required":false,"tsType":{"name":"boolean"},"description":"Set true to highlight the current menu item."},"isHome":{"required":false,"tsType":{"name":"boolean"},"description":"When using Blue React's routing system: define this link as home page link."},"dropdownClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends class name of the dropdown menu."},"dropdownStyle":{"required":false,"tsType":{"name":"CSSProperties"},"description":"Extends style of the dropdown menu."},"children":{"required":false,"tsType":{"name":"any"},"description":"Set children to create a nested `MenuItem` as a dropdown."},"className":{"required":false,"tsType":{"name":"any"},"description":"Defines class name."},"showDropdown":{"required":false,"tsType":{"name":"boolean"},"description":"Defines dropdown status from outside."},"onShowDropdown":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(showDropdown: boolean) => void","signature":{"arguments":[{"name":"showDropdown","type":{"name":"boolean"}}],"return":{"name":"void"}}},"description":"Callback when `showDropdown` changes."},"supportOutside":{"required":false,"tsType":{"name":"boolean"},"description":"Close on click outside."},"outsideIgnoreClasses":{"required":false,"tsType":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},"description":"Overrides default class list to be ignored on click outside.\r\nHint: If you want this menu item to stay open when others will open, set:\r\n`outsideIgnoreClasses={[\"blue-menu-item-wrapper\"]}`."},"elementType":{"required":false,"tsType":{"name":"any"},"description":"By default, MenuItem is a `\"button\"`. If you set a `href`, it's a `\"a\"`.\r\nIf you want to have it another type, you can pass a component reference with this prop (e.g. `Link`)."},"target":{"required":false,"tsType":{"name":"string"},"description":""},"rel":{"required":false,"tsType":{"name":"string"},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":""},"type":{"required":false,"tsType":{"name":"string"},"description":""},"onDragStart":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the draggable target (the source element): occurs when the user starts to drag an element"},"onDrag":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the draggable target (the source element): occurs when an element is being dragged"},"onDragEnd":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the draggable target (the source element): occurs when the user has finished dragging the element"},"onDragEnter":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the drop target: occurs when the dragged element enters the drop target"},"onDragOver":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the drop target: occurs when the dragged element is over the drop target"},"onDragLeave":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the drop target: occurs when the dragged element leaves the drop target"},"onDrop":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.DragEvent) => void | React.DragEventHandler","signature":{"arguments":[{"name":"event","type":{"name":"ReactDragEvent","raw":"React.DragEvent"}}],"return":{"name":"union","raw":"void | React.DragEventHandler","elements":[{"name":"void"},{"name":"ReactDragEventHandler","raw":"React.DragEventHandler"}]}}},"description":"Fired on the drop target: occurs when the dragged element is dropped on the drop target"},"draggable":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies whether an element is draggable or not.\r\n\r\n**Important:** To make draggable menu items work in Firefox, the elementType must not be `\"button\"`. Set it to something else, like `\"div\"`."},"hideDraggableIcon":{"required":false,"tsType":{"name":"boolean"},"description":""},"data-tooltip":{"required":false,"tsType":{"name":"string"},"description":""},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies whether an element is disabled or not."},"style":{"required":false,"tsType":{"name":"ReactCSSProperties","raw":"React.CSSProperties"},"description":"Specifies style of an element."},"id":{"required":false,"tsType":{"name":"string"},"description":""}},"examples":{"Draggable.tsx":"import { DragEvent, useCallback, useState } from \"react\"\r\nimport { MenuItem, MenuItemProps } from \"blue-react\"\r\n\r\nexport default function MenuItemExample() {\r\n    const bodyMenuItemProps: MenuItemProps = {\r\n        className: \"w-100\",\r\n        labelClassName: \"d-inline-block\",\r\n        caretClassName: \"d-inline-block\"\r\n    }\r\n\r\n    const [itemIDs, setItemIDs] = useState([\"1\", \"2\", \"3\", \"4\", \"5\"])\r\n\r\n    const dragStart = useCallback((event: DragEvent) => {\r\n        const target = event.target as HTMLElement\r\n        event.dataTransfer.setData(\"text/plain\", target.id)\r\n    }, [])\r\n\r\n    const drop = useCallback(\r\n        (event: DragEvent) => {\r\n            event.preventDefault()\r\n\r\n            const draggedId = event.dataTransfer.getData(\"text\")\r\n            const dropTargetId = (event.target as HTMLElement).id\r\n\r\n            const draggedIndex = itemIDs.indexOf(draggedId)\r\n            const dropTargetIndex = itemIDs.indexOf(dropTargetId)\r\n\r\n            const newItemIDs = [...itemIDs]\r\n            newItemIDs.splice(draggedIndex, 1)\r\n            newItemIDs.splice(dropTargetIndex, 0, draggedId)\r\n\r\n            setItemIDs(newItemIDs)\r\n        },\r\n        [itemIDs]\r\n    )\r\n\r\n    const dragOver = useCallback((event: DragEvent) => {\r\n        event.preventDefault()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                <strong>Important:</strong> To make draggable menu items work in Firefox, the <code>elementType</code>{\" \"}\r\n                must not be <code>\"button\"</code>. Set it to something else, like <code>\"div\"</code>.\r\n            </p>\r\n            <div onDrop={drop} onDragOver={dragOver}>\r\n                {itemIDs.map((id) => (\r\n                    <MenuItem\r\n                        {...bodyMenuItemProps}\r\n                        elementType={\"div\"}\r\n                        key={id}\r\n                        id={id}\r\n                        draggable\r\n                        onDragStart={dragStart}\r\n                        onDragOver={dragOver}\r\n                        label={`Item ${id}`}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","Horizontal layout in sidebar.tsx":"import { useState } from \"react\"\r\nimport { MenuItem, SidebarMenu } from \"blue-react\"\r\n\r\nexport default function MenuItemExample() {\r\n    const [navigationSource, setNavigationSource] = useState<\"user\" | \"default\">(\"default\")\r\n\r\n    return (\r\n        <div className=\"bg-primary position-relative\">\r\n            <SidebarMenu sidebarClass=\"position-static shadow-none overflow-visible\" menuClass=\"overflow-visible\">\r\n                <div className=\"blue-sidebar-visible-on-open blue-sidebar-menu-horizontal-on-open\">\r\n                    <MenuItem\r\n                        label=\"Default\"\r\n                        labelClassName=\"text-center w-100\"\r\n                        onClick={() => setNavigationSource(\"default\")}\r\n                        isActive={navigationSource === \"default\"}\r\n                    />\r\n\r\n                    <MenuItem\r\n                        label=\"User\"\r\n                        labelClassName=\"text-center w-100\"\r\n                        onClick={() => setNavigationSource(\"user\")}\r\n                        isActive={navigationSource === \"user\"}\r\n                    />\r\n                </div>\r\n            </SidebarMenu>\r\n            <p className=\"p-3 bg-body\">Resize the browser to see how the sidebar and its items behave.</p>\r\n        </div>\r\n    )\r\n}\r\n","Horizontal layout with dropdown.tsx":"import { IconMenuItem, MenuItem, SidebarMenu } from \"blue-react\"\r\nimport { BoxArrowLeft, House } from \"react-bootstrap-icons\"\r\nimport { useState } from \"react\"\r\n\r\nexport default function MenuItemExample() {\r\n    const [showDropdown, setShowDropdown] = useState(false)\r\n\r\n    return (\r\n        <div className=\"bg-primary position-relative\">\r\n            <SidebarMenu\r\n                sidebarClass=\"position-static shadow-none overflow-visible\"\r\n                menuClass=\"overflow-visible\"\r\n                topContent={\r\n                    <>\r\n                        <div className=\"d-flex blue-sidebar-menu-horizontal-on-open\">\r\n                            <MenuItem\r\n                                href=\"#home\"\r\n                                label=\"Home\"\r\n                                icon={<House className=\"bi\" />}\r\n                                labelClassName=\"text-center w-100\"\r\n                            />\r\n                            <div className=\"position-relative\">\r\n                                <IconMenuItem\r\n                                    title=\"More\"\r\n                                    supportOutside\r\n                                    showDropdown={showDropdown}\r\n                                    onShowDropdown={setShowDropdown}\r\n                                    labelClassName=\"text-center w-100\"\r\n                                    dropdownClassName=\"position-absolute z-3 end-0 blue-sidebar-menu-vertical-on-open\"\r\n                                >\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            setShowDropdown(false)\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem label=\"Sign out\" icon={<BoxArrowLeft className=\"bi\" />} />\r\n                                    </div>\r\n                                </IconMenuItem>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                }\r\n            />\r\n            <p className=\"p-3 bg-body\">Resize the browser to see how the sidebar and its items behave.</p>\r\n        </div>\r\n    )\r\n}\r\n","Sidebar.tsx":"import { MenuItem, SidebarMenu } from \"blue-react\"\r\n\r\nexport default function MenuItemExample() {\r\n    return (\r\n        <div className=\"bg-primary position-relative\">\r\n            <SidebarMenu sidebarClass=\"position-static shadow-none overflow-visible\" menuClass=\"overflow-visible\">\r\n                <MenuItem icon={<span>😅</span>} label=\"Hello World\" />\r\n                <MenuItem\r\n                    icon={<span style={{ transform: \"scale(-1, 1)\" }}>👀</span>}\r\n                    label=\"Click to see sub items\"\r\n                    supportOutside\r\n                >\r\n                    <MenuItem label=\"I am a child, hi\" />\r\n                    <MenuItem label=\"Second child\">\r\n                        <MenuItem label=\"Even more nested\" />\r\n                    </MenuItem>\r\n                </MenuItem>\r\n            </SidebarMenu>\r\n            <p className=\"p-3 bg-body\">Resize the browser to see how the sidebar and its items behave.</p>\r\n        </div>\r\n    )\r\n}\r\n","Usage in body.tsx":"import { MenuItem, MenuItemProps } from \"blue-react\"\r\nimport { EmojiHeartEyesFill } from \"react-bootstrap-icons\"\r\n\r\nexport default function MenuItemExample() {\r\n    const bodyMenuItemProps: MenuItemProps = {\r\n        className: \"w-100\",\r\n        labelClassName: \"d-inline-block\",\r\n        caretClassName: \"d-inline-block\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>Usage in body without sidebar or action bar</p>\r\n\r\n            <div className=\"d-flex flex-column flex-md-row gap-3 w-100\">\r\n                <article className=\"flex-fill\">\r\n                    <h4 className=\"mt-4 mb-3\">Single menu item</h4>\r\n                    <MenuItem {...bodyMenuItemProps} icon={<EmojiHeartEyesFill />} label=\"John Boy\" />\r\n                </article>\r\n\r\n                <article className=\"flex-fill\">\r\n                    <h4 className=\"mt-4 mb-3\">Dropdown</h4>\r\n                    <MenuItem {...bodyMenuItemProps} icon={<EmojiHeartEyesFill />} label=\"John Boy\">\r\n                        <MenuItem {...bodyMenuItemProps} icon={<EmojiHeartEyesFill />} label=\"I am a child item\" />\r\n                    </MenuItem>\r\n                </article>\r\n\r\n                <article className=\"flex-fill\">\r\n                    <h4 className=\"mt-4 mb-3\">Split dropdown</h4>\r\n                    <div\r\n                        className=\"d-grid w-100\"\r\n                        style={{\r\n                            gridTemplateAreas: '\"a b\" \"c c\"',\r\n                            gridTemplateColumns: \"minmax(auto, calc(100% - 3rem)) 3rem\"\r\n                        }}\r\n                    >\r\n                        <MenuItem\r\n                            {...bodyMenuItemProps}\r\n                            style={{ gridArea: \"a\" }}\r\n                            icon={<EmojiHeartEyesFill />}\r\n                            label=\"John Boy\"\r\n                        />\r\n                        <MenuItem\r\n                            {...bodyMenuItemProps}\r\n                            style={{ gridArea: \"b\" }}\r\n                            dropdownStyle={{ gridArea: \"c\" }}\r\n                            supportOutside\r\n                        >\r\n                            <MenuItem {...bodyMenuItemProps} icon={<EmojiHeartEyesFill />} label=\"I am a child item\" />\r\n                        </MenuItem>\r\n                    </div>\r\n                </article>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"}},"src\\components\\Modal.tsx":{"description":"Simple modal/dialog. Designed to work as an alternative to JavaScript's native `alert()`, `prompt()` and `confirm()` functions.\r\nIt uses Bootstrap's Modal components.\r\n\r\nFor easy use, you should use the hook `useModal` together with `ModalProvider`. See the example there.","displayName":"Modal","methods":[],"props":{"modalContent":{"required":false,"tsType":{"name":"string"},"description":""},"modalTitle":{"required":false,"tsType":{"name":"string"},"description":""},"modalIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"unSetModalContent":{"required":true,"tsType":{"name":"signature","type":"function","raw":"(modalContent?: string) => void","signature":{"arguments":[{"name":"modalContent","type":{"name":"string"}}],"return":{"name":"void"}}},"description":""},"onSubmit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(input: string | boolean | null) => void","signature":{"arguments":[{"name":"input","type":{"name":"union","raw":"string | boolean | null","elements":[{"name":"string"},{"name":"boolean"},{"name":"null"}]}}],"return":{"name":"void"}}},"description":"Type of `input` depends on `type` prop and which action occured.\r\nWhen it's a string, the user entered something. When it's a boolean, the user clicked \"Yes\" or \"No\".\r\nWhen it's `null`, the user cancelled the modal."},"defaultInput":{"required":false,"tsType":{"name":"string"},"description":""},"type":{"required":true,"tsType":{"name":"ModalType"},"description":"`\"ask\"` | `\"tell\"` | `\"verify\"`"},"inputType":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"text\"","computed":false}},"switchPrimaryBtn":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"acceptBtnText":{"required":false,"tsType":{"name":"string"},"description":""},"cancelBtnText":{"required":false,"tsType":{"name":"string"},"description":""}}},"src\\components\\ModalProvider.tsx":{"description":"","displayName":"ModalProvider","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""}},"exampleCode":"import { ModalProvider, useModal } from \"blue-react\"\r\n\r\nfunction InsideComp() {\r\n    // Use the `useModal` hook.\r\n    const { tell, verify, ask } = useModal()\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                Allowed params for the functions <code>tell</code> and <code>verify</code>:<br />\r\n                <code>\r\n                    (text: string, options:{\" \"}\r\n                    {`{ title?: string, icon?: ReactNode, switchPrimaryBtn?: boolean, acceptBtnText?: string, cancelBtnText?: string }`}\r\n                    ?)\r\n                </code>\r\n            </p>\r\n            <p>\r\n                Allowed params for the function <code>ask</code>:<br />\r\n                <code>\r\n                    (text: string, options:{\" \"}\r\n                    {`{ title?: string, icon?: ReactNode, switchPrimaryBtn?: boolean, inputType?: string, acceptBtnText?: string, cancelBtnText?: string }`}\r\n                    ?)\r\n                </code>\r\n            </p>\r\n\r\n            <div className=\"d-flex gap-2\">\r\n                <button\r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={() => {\r\n                        tell(\"Hey, what's up\")\r\n                    }}\r\n                >\r\n                    tell\r\n                </button>\r\n\r\n                <button\r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={\r\n                        // Make sure to make your function \"async\" when using \"await\"\r\n                        async () => {\r\n                            // Use \"await\" to wait until the user enters something\r\n                            const answer = await ask(\"Please enter password\", {\r\n                                title: \"Tell me the correct answer\",\r\n                                inputType: \"password\"\r\n                            })\r\n                            if (answer && answer.toString() === \"password\") {\r\n                                tell(\"That's correct!\")\r\n                            } else {\r\n                                tell(\"Wrong!\")\r\n                            }\r\n                        }\r\n                    }\r\n                >\r\n                    ask\r\n                </button>\r\n\r\n                <button\r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={async () => {\r\n                        const answer = await verify(\"Are you sure?\", {\r\n                            title: \"Say yes or no\",\r\n                            icon: (\r\n                                <span>\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        width=\"1rem\"\r\n                                        height=\"1rem\"\r\n                                        fill=\"currentColor\"\r\n                                        className=\"bi bi-question-circle\"\r\n                                        viewBox=\"0 0 16 16\"\r\n                                    >\r\n                                        <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\" />\r\n                                        <path d=\"M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z\" />\r\n                                    </svg>\r\n                                </span>\r\n                            ),\r\n                            switchPrimaryBtn: true\r\n                        })\r\n                        console.log({ answer })\r\n                        if (answer === true) {\r\n                            tell(\"So, you're sure\")\r\n                        }\r\n                    }}\r\n                >\r\n                    verify\r\n                </button>\r\n\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={async () => {\r\n                        const name = await ask(\"What is your name?\")\r\n                        console.log(name)\r\n                        if (name) {\r\n                            const retVal = await tell(\"Hello, \" + name)\r\n                            console.log(retVal)\r\n\r\n                            if (await verify(\"Is everything alright?\")) {\r\n                                await tell(\"Oh, nice\")\r\n                            } else {\r\n                                await tell(\"Oh no :(\")\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    Start a conversation\r\n                </button>\r\n\r\n                <br />\r\n\r\n                <button\r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={() => {\r\n                        alert(\"Hello there!\")\r\n                        if (window.confirm(\"Everything okay?\")) {\r\n                            alert(\"Alright\")\r\n                        }\r\n                    }}\r\n                >\r\n                    How a native <code>alert()</code> would look like\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n/**\r\n * Your component where you use `useModal` has to be wrapped around `<ModalProvider></ModalProvider>`.\r\n * Best practice is to wrap it around your root component.\r\n */\r\nexport default function ModalProviderExample() {\r\n    return (\r\n        <ModalProvider>\r\n            <InsideComp />\r\n        </ModalProvider>\r\n    )\r\n}\r\n","examples":{"Custom button text.tsx":"import { ModalProvider, useModal } from \"blue-react\"\r\n\r\nfunction InsideComp() {\r\n    // Use the `useModal` hook.\r\n    const { tell, verify } = useModal()\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={async () => {\r\n                const answer = await verify(\"Are you sure?\", {\r\n                    title: \"Say yay or nay\",\r\n                    acceptBtnText: \"yay\",\r\n                    cancelBtnText: \"nay\"\r\n                })\r\n\r\n                if (answer === true) {\r\n                    tell(\"So, you're sure\")\r\n                }\r\n            }}\r\n        >\r\n            verify\r\n        </button>\r\n    )\r\n}\r\n\r\n/**\r\n * Your component where you use `useModal` has to be wrapped around `<ModalProvider></ModalProvider>`.\r\n * Best practice is to wrap it around your root component.\r\n */\r\nexport default function ModalProviderExample() {\r\n    return (\r\n        <ModalProvider>\r\n            <InsideComp />\r\n        </ModalProvider>\r\n    )\r\n}\r\n"}},"src\\components\\Outside.tsx":{"description":"Component that fires an event if you click outside of it","displayName":"Outside","methods":[],"props":{"children":{"required":true,"tsType":{"name":"any"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"onClickOutside":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"MouseEvent"}}],"return":{"name":"void"}}},"description":""},"onClick":{"required":false,"tsType":{"name":"union","raw":"MouseEventHandler<HTMLDivElement> | undefined","elements":[{"name":"MouseEventHandler","elements":[{"name":"HTMLDivElement"}],"raw":"MouseEventHandler<HTMLDivElement>"},{"name":"undefined"}]},"description":""},"style":{"required":false,"tsType":{"name":"CSSProperties"},"description":""},"wrapperRef":{"required":false,"tsType":{"name":"RefObject","elements":[{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]}],"raw":"RefObject<HTMLDivElement | null>"},"description":""}}},"src\\components\\Page.tsx":{"description":"Main component for each page.","displayName":"Page","methods":[],"props":{"title":{"required":false,"tsType":{"name":"string"},"description":"Will be set to the document's `<title>` tag."},"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""}}},"src\\components\\Search.tsx":{"description":"A search bar that can be placed to the sidebar or on a page.","displayName":"Search","methods":[],"props":{"autoFocus":{"required":false,"tsType":{"name":"boolean"},"description":""},"body":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of a page?"},"className":{"required":false,"tsType":{"name":"string"},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent<HTMLInputElement>) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}}],"return":{"name":"void"}}},"description":""},"onSubmit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FormEvent<HTMLFormElement>) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactFormEvent","raw":"React.FormEvent<HTMLFormElement>","elements":[{"name":"HTMLFormElement"}]}}],"return":{"name":"void"}}},"description":""},"placeholder":{"required":false,"tsType":{"name":"string"},"description":""},"reset":{"required":false,"tsType":{"name":"boolean"},"description":"Allow reset?"},"resetIcon":{"required":false,"tsType":{"name":"any"},"description":"Define custom icon for the reset button."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of the sidebar?"},"value":{"required":false,"tsType":{"name":"string"},"description":""},"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"id":{"required":false,"tsType":{"name":"string"},"description":""},"inputRef":{"required":false,"tsType":{"name":"RefObject","elements":[{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]}],"raw":"RefObject<HTMLInputElement | null>"},"description":"Set `ref` prop of the input element. Let's you take control of it from the outside, e.g. to set focus."}},"exampleCode":"import { useRef, useState } from \"react\"\r\nimport { Search } from \"blue-react\"\r\n\r\nexport default function SearchExample() {\r\n    const [value, setValue] = useState(\"\")\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    return (\r\n        <>\r\n            <Search\r\n                inputRef={inputRef}\r\n                body\r\n                className=\"w-50\"\r\n                onChange={({ target }) => setValue(target.value)}\r\n                onSubmit={() => alert(\"Do form submit now!\")}\r\n                placeholder=\"Begin typing...\"\r\n                reset\r\n                value={value}\r\n            />\r\n\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary mt-3\"\r\n                onClick={() => {\r\n                    inputRef.current?.focus()\r\n                }}\r\n            >\r\n                Set focus from outside using ref\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n"},"src\\components\\SidebarMenu.tsx":{"description":"Sidebar for the `Layout` component.","displayName":"SidebarMenu","methods":[],"props":{"sidebarClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the sidebar."},"sidebarStyle":{"required":false,"tsType":{"name":"CSSProperties"},"description":"Sets the `style` prop by the sidebar."},"menuClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the menu."},"menuStyle":{"required":false,"tsType":{"name":"CSSProperties"},"description":"Sets the `style` prop by the menu."},"topContent":{"required":false,"tsType":{"name":"ReactNode"},"description":"Content on top of the menu."},"bottomContent":{"required":false,"tsType":{"name":"ReactNode"},"description":"Content for the bottom part of the sidebar."},"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""}}},"src\\components\\SidebarToggler.tsx":{"description":"Button to toggle sidebar state. Designed for internal use inside of `Layout`.","displayName":"SidebarToggler","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":"","defaultValue":{"value":"\"\"","computed":false}},"sidebarToggleIconComponent":{"required":true,"tsType":{"name":"ReactNode"},"description":""},"onClick":{"required":true,"tsType":{"name":"MouseEventHandler","elements":[{"name":"HTMLButtonElement"}],"raw":"MouseEventHandler<HTMLButtonElement>"},"description":""}}},"src\\components\\SimpleLayout.tsx":{"description":"A simple layout with header and main content area.","displayName":"SimpleLayout","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"header":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"noPageBorder":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}}},"examples":{"Usage.tsx":"import { HeaderTitle, SimpleLayout } from \"blue-react\"\r\n\r\nexport default function Usage() {\r\n    return (\r\n        <div className=\"bg-theme\">\r\n            <SimpleLayout header={<HeaderTitle appTitle=\"My website\" />}>\r\n                <div className=\"container\">\r\n                    <div className=\"h1\">Hello World</div>\r\n\r\n                    <p>\r\n                        Lorem ipsum dolor sit amet, consetetur sadipscing elitr,\r\n                        sed diam nonumy eirmod tempor invidunt ut labore et\r\n                        dolore magna aliquyam erat, sed diam voluptua. At vero\r\n                        eos et accusam et justo duo dolores et ea rebum. Stet\r\n                        clita kasd gubergren, no sea takimata sanctus est Lorem\r\n                        ipsum dolor sit amet. Lorem ipsum dolor sit amet,\r\n                        consetetur sadipscing elitr, sed diam nonumy eirmod\r\n                        tempor invidunt ut labore et dolore magna aliquyam erat,\r\n                        sed diam voluptua. At vero eos et accusam et justo duo\r\n                        dolores et ea rebum. Stet clita kasd gubergren, no sea\r\n                        takimata sanctus est Lorem ipsum dolor sit amet. Lorem\r\n                        ipsum dolor sit amet, consetetur sadipscing elitr, sed\r\n                        diam nonumy eirmod tempor invidunt ut labore et dolore\r\n                        magna aliquyam erat, sed diam voluptua. At vero eos et\r\n                        accusam et justo duo dolores et ea rebum. Stet clita\r\n                        kasd gubergren, no sea takimata sanctus est Lorem ipsum\r\n                        dolor sit amet. Duis autem vel eum iriure dolor in\r\n                        hendrerit in vulputate velit esse molestie consequat,\r\n                        vel illum dolore eu feugiat nulla facilisis at vero eros\r\n                        et accumsan et iusto odio dignissim qui blandit praesent\r\n                        luptatum zzril delenit augue duis dolore te feugait\r\n                        nulla facilisi. Lorem ipsum dolor sit amet, consectetuer\r\n                        adipiscing elit, sed diam nonummy nibh euismod tincidunt\r\n                        ut laoreet dolore magna aliquam erat volutpat. Ut wisi\r\n                        enim ad minim veniam, quis nostrud exerci tation\r\n                        ullamcorper suscipit lobortis nisl ut aliquip ex ea\r\n                        commodo consequat. Duis autem vel eum iriure dolor in\r\n                        hendrerit in vulputate velit esse molestie consequat,\r\n                        vel illum dolore eu feugiat nulla facilisis at vero eros\r\n                        et accumsan et iusto odio dignissim qui blandit praesent\r\n                        luptatum zzril delenit augue duis dolore te feugait\r\n                        nulla facilisi. Nam liber tempor cum soluta nobis\r\n                        eleifend option congue nihil imperdiet doming id quod\r\n                        mazim placerat facer possim assum. Lorem ipsum dolor sit\r\n                        amet, consectetuer adipiscing elit, sed diam nonummy\r\n                        nibh euismod tincidunt ut laoreet dolore magna aliquam\r\n                        erat volutpat. Ut wisi enim ad minim veniam, quis\r\n                        nostrud exerci tation ullamcorper suscipit lobortis nisl\r\n                        ut aliquip ex ea commodo consequat. Duis autem vel eum\r\n                        iriure dolor in hendrerit in vulputate velit esse\r\n                        molestie consequat, vel illum dolore eu feugiat nulla\r\n                        facilisis. At vero eos et accusam et justo duo dolores\r\n                        et ea rebum. Stet clita kasd gubergren, no sea takimata\r\n                        sanctus est Lorem ipsum dolor sit amet. Lorem ipsum\r\n                        dolor sit amet, consetetur sadipscing elitr, sed diam\r\n                        nonumy eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat, sed diam voluptua. At vero eos et accusam\r\n                        et justo duo dolores et ea rebum. Stet clita kasd\r\n                        gubergren, no sea takimata sanctus est Lorem ipsum dolor\r\n                        sit amet. Lorem ipsum dolor sit amet, consetetur\r\n                        sadipscing elitr, At accusam aliquyam diam diam dolore\r\n                        dolores duo eirmod eos erat, et nonumy sed tempor et et\r\n                        invidunt justo labore Stet clita ea et gubergren, kasd\r\n                        magna no rebum. sanctus sea sed takimata ut vero\r\n                        voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum\r\n                        dolor sit amet, consetetur sadipscing elitr, sed diam\r\n                        nonumy eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat. Consetetur sadipscing elitr, sed diam\r\n                        nonumy eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat, sed diam voluptua. At vero eos et accusam\r\n                        et justo duo dolores et ea rebum. Stet clita kasd\r\n                        gubergren, no sea takimata sanctus est Lorem ipsum dolor\r\n                        sit amet. Lorem ipsum dolor sit amet, consetetur\r\n                        sadipscing elitr, sed diam nonumy eirmod tempor invidunt\r\n                        ut labore et dolore magna aliquyam erat, sed diam\r\n                        voluptua. At vero eos et accusam et justo duo dolores et\r\n                        ea rebum. Stet clita kasd gubergren, no sea takimata\r\n                        sanctus est Lorem ipsum dolor sit amet. Lorem ipsum\r\n                        dolor sit amet, consetetur sadipscing elitr, sed diam\r\n                        nonumy eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat, sed diam voluptua. At vero eos et accusam\r\n                        et justo duo dolores et ea rebum. Stet clita kasd\r\n                        gubergren, no sea takimata sanctus. Lorem ipsum dolor\r\n                        sit amet, consetetur sadipscing elitr, sed diam nonumy\r\n                        eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat, sed diam voluptua. At vero eos et accusam\r\n                        et justo duo dolores et ea rebum. Stet clita kasd\r\n                        gubergren, no sea takimata sanctus est Lorem ipsum dolor\r\n                        sit amet. Lorem ipsum dolor sit amet, consetetur\r\n                        sadipscing elitr, sed diam nonumy eirmod tempor invidunt\r\n                        ut labore et dolore magna aliquyam erat, sed diam\r\n                        voluptua. At vero eos et accusam et justo duo dolores et\r\n                        ea rebum. Stet clita kasd gubergren, no sea takimata\r\n                        sanctus est Lorem ipsum dolor sit amet. Lorem ipsum\r\n                        dolor sit amet, consetetur sadipscing elitr, sed diam\r\n                        nonumy eirmod tempor invidunt ut labore et dolore magna\r\n                        aliquyam erat, sed diam voluptua. At vero eos et accusam\r\n                        et justo duo dolores et ea rebum. Stet clita kasd\r\n                        gubergren, no sea takimata sanctus est Lorem ipsum dolor\r\n                        sit amet. Duis autem vel eum iriure dolor in hendrerit\r\n                        in vulputate velit esse molestie consequat, vel illum\r\n                        dolore eu feugiat nulla facilisis at vero eros et\r\n                        accumsan et iusto odio dignissim qui blandit praesent\r\n                        luptatum zzril delenit augue duis dolore te feugait\r\n                        nulla facilisi. Lorem ipsum dolor sit amet, consectetuer\r\n                        adipiscing elit, sed diam nonummy nibh euismod tincidunt\r\n                        ut laoreet dolore magna aliquam erat volutpat. Ut wisi\r\n                        enim ad minim veniam, quis nostrud exerci tation\r\n                        ullamcorper suscipit lobortis nisl ut aliquip ex ea\r\n                        commodo consequat. Duis autem vel eum iriure dolor in\r\n                        hendrerit in vulputate velit esse molestie consequat,\r\n                        vel illum dolore eu feugiat nulla facilisis at vero eros\r\n                        et accumsan et iusto odio dignissim qui blandit praesent\r\n                        luptatum zzril delenit augue duis dolore te feugait\r\n                        nulla facilisi. Nam liber tempor cum soluta nobis\r\n                        eleifend option congue nihil imperdiet doming id quod\r\n                        mazim placerat facer possim assum. Lorem ipsum dolor sit\r\n                        amet, consectetuer adipiscing elit, sed diam nonummy\r\n                        nibh euismod tincidunt ut laoreet dolore magna aliquam\r\n                        erat volutpat. Ut wisi enim ad minim veniam, quis\r\n                        nostrud exerci tation ullamcorper suscipit lobortis nisl\r\n                        ut aliquip ex ea commodo\r\n                    </p>\r\n                </div>\r\n            </SimpleLayout>\r\n        </div>\r\n    )\r\n}\r\n"}},"src\\components\\SlimContainer.tsx":{"description":"Shortcut for a combination using Bootstrap's Grid System to create a slim responsive container.","displayName":"SlimContainer","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"innerClassName":{"required":false,"tsType":{"name":"string"},"description":""}},"exampleCode":"import { SlimContainer } from \"blue-react\"\r\n\r\nexport default function SlimContainerExample() {\r\n    return (\r\n        <div>\r\n            <p>\r\n                Bootstrap's form components like <code>.form-control</code> and <code>.form-select</code> always have a\r\n                width of <code>100%</code>:\r\n            </p>\r\n\r\n            <input type=\"text\" className=\"form-control mb-3\" placeholder=\"Enter something\" />\r\n\r\n            <p>\r\n                <code>&lt;SlimContainer /&gt;</code> can help to keep all elements inside the container at the same more\r\n                user friendly width:\r\n            </p>\r\n\r\n            <SlimContainer>\r\n                <input type=\"text\" className=\"form-control mb-3\" placeholder=\"Enter something\" />\r\n                <div className=\"form-floating mb-3\">\r\n                    <select className=\"form-select\" id=\"floatingSelect\" aria-label=\"Floating label select example\">\r\n                        <option selected>Open this select menu</option>\r\n                        <option value=\"1\">One</option>\r\n                        <option value=\"2\">Two</option>\r\n                        <option value=\"3\">Three</option>\r\n                    </select>\r\n                    <label htmlFor=\"floatingSelect\">Works with selects</label>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary btn-lg d-block w-100\">\r\n                    Submit\r\n                </button>\r\n            </SlimContainer>\r\n        </div>\r\n    )\r\n}\r\n"},"src\\components\\Status.tsx":{"description":"","displayName":"Status","methods":[],"props":{"alert":{"required":false,"tsType":{"name":"StatusAlert"},"description":""},"onUnsetAlert":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":""},"successIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"✔\"","computed":false}},"infoIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"ℹ️\"","computed":false}},"warningIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"⚠️\"","computed":false}},"dangerIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"❌\"","computed":false}},"status":{"required":false,"tsType":{"name":"StatusType"},"description":"","defaultValue":{"value":"null","computed":false}}}},"src\\components\\StatusProvider.tsx":{"description":"","displayName":"StatusProvider","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"successIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"infoIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"warningIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"dangerIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":""}},"exampleCode":"import {\r\n    CheckCircleFill,\r\n    ExclamationCircleFill,\r\n    InfoCircleFill,\r\n    XCircleFill\r\n} from \"react-bootstrap-icons\"\r\nimport { StatusProvider, useStatus } from \"blue-react\"\r\n\r\nfunction InsideComp() {\r\n    const { setAlert, setStatus } = useStatus()\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-1 d-flex gap-1\">\r\n                <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() =>\r\n                        setAlert({\r\n                            title: \"Hello World\",\r\n                            status: \"success\"\r\n                        })\r\n                    }\r\n                >\r\n                    Set alert\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() =>\r\n                        setAlert({\r\n                            title: \"Hello World\",\r\n                            status: \"danger\",\r\n                            detailText: `Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\r\n\r\n                Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.`\r\n                        })\r\n                    }\r\n                >\r\n                    Set full alert\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() => setAlert(null)}\r\n                >\r\n                    Unset alert\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"mb-1 d-flex gap-1\">\r\n                <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() => setStatus(\"loading\")}\r\n                >\r\n                    Show loading\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-outline-success\"\r\n                    onClick={() => setStatus(\"success\")}\r\n                >\r\n                    Show success\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-outline-info\"\r\n                    onClick={() => setStatus(\"info\")}\r\n                >\r\n                    Show info\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-outline-warning\"\r\n                    onClick={() => setStatus(\"warning\")}\r\n                >\r\n                    Show warning\r\n                </button>\r\n                <button\r\n                    className=\"btn btn-outline-danger\"\r\n                    onClick={() => setStatus(\"danger\")}\r\n                >\r\n                    Show danger\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"mb-1 d-flex gap-1\">\r\n                <button\r\n                    className=\"btn btn-light\"\r\n                    onClick={() => setStatus(null)}\r\n                >\r\n                    Hide status\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default function StatusExample() {\r\n    return (\r\n        <StatusProvider\r\n            successIcon={<CheckCircleFill />}\r\n            infoIcon={<InfoCircleFill />}\r\n            warningIcon={<ExclamationCircleFill />}\r\n            dangerIcon={<XCircleFill />}\r\n        >\r\n            <InsideComp />\r\n        </StatusProvider>\r\n    )\r\n}\r\n"},"src\\components\\ToastProvider.tsx":{"description":"Push notifications to your visitors using Bootstrap's toast component.","displayName":"ToastProvider","methods":[],"props":{"children":{"required":false,"tsType":{"name":"ReactNode"},"description":""},"successIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"✔\"","computed":false}},"infoIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"ℹ️\"","computed":false}},"warningIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"⚠️\"","computed":false}},"dangerIcon":{"required":false,"tsType":{"name":"ReactNode"},"description":"","defaultValue":{"value":"\"❌\"","computed":false}}},"examples":{"Usage.tsx":"import { ToastProvider, useToast } from \"blue-react\"\r\n\r\nfunction SubComponent() {\r\n    const { addToast, clearToasts } = useToast()\r\n    return (\r\n        <div className=\"d-flex gap-3\">\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn blue-btn-soft-primary\"\r\n                onClick={() => {\r\n                    addToast({\r\n                        type: \"success\",\r\n                        title: \"Success!\",\r\n                        message: \"ToastProvider works\"\r\n                    })\r\n                }}\r\n            >\r\n                Click to add a toast\r\n            </button>\r\n\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn blue-btn-soft-danger\"\r\n                onClick={() => {\r\n                    clearToasts()\r\n                }}\r\n            >\r\n                Remove all messages\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function RootComponent() {\r\n    return (\r\n        <ToastProvider>\r\n            <SubComponent />\r\n        </ToastProvider>\r\n    )\r\n}\r\n","Use of custom icons.tsx":"import { CheckCircleFill, ExclamationCircleFill, InfoCircleFill, XCircleFill } from \"react-bootstrap-icons\"\r\nimport { ToastProvider, useToast } from \"blue-react\"\r\n\r\nfunction SubComponent() {\r\n    const { addToast } = useToast()\r\n    return (\r\n        <div className=\"d-flex gap-3\">\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn blue-btn-soft-primary\"\r\n                onClick={() => {\r\n                    addToast({\r\n                        type: \"success\",\r\n                        title: \"Success!\",\r\n                        message: \"ToastProvider works\"\r\n                    })\r\n                }}\r\n            >\r\n                Click to add a toast\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function RootComponent() {\r\n    return (\r\n        <ToastProvider\r\n            dangerIcon={<XCircleFill />}\r\n            infoIcon={<InfoCircleFill />}\r\n            successIcon={<CheckCircleFill />}\r\n            warningIcon={<ExclamationCircleFill />}\r\n        >\r\n            <SubComponent />\r\n        </ToastProvider>\r\n    )\r\n}\r\n"}}}