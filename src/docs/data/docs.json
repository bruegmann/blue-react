{"src\\components\\ActionMenu.tsx":{"description":"The Action Menu on the top right of a page. You can place Actions here which are in context of the current page.","displayName":"ActionMenu","methods":[],"props":{"hideToggleAction":{"required":false,"tsType":{"name":"boolean"},"description":"Hides the toggle button in mobile view. Can be useful when using multiple ActionMenus and not show the toggle button for each menu."},"children":{"required":false,"tsType":{"name":"any"},"description":""},"toggleIcon":{"required":false,"tsType":{"name":"any"},"description":"Icon component for the toggle icon."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"break":{"required":false,"tsType":{"name":"union","raw":"breakOption | \"none\"","elements":[{"name":"breakOption"},{"name":"literal","value":"\"none\""}]},"description":"\"sm\" | \"md\" | \"lg\" | \"xl\" | \"none\""}},"exampleCode":"import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Switch } from \"blue-react\"\n\nfunction ActionMenuExample() {\n    const [isChecked, setIsChecked] = useState(false)\n    const toggleIsChecked = () => setIsChecked(!isChecked)\n\n    const style = {\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\n    }\n\n    return (\n        <div>\n            <Switch\n                className=\"lg me-3\"\n                checked={isChecked}\n                onChange={toggleIsChecked}\n                sliderLabel={isChecked ? \"Mobile\" : \"PC\"}\n            />\n\n            <p>\n                <Link\n                    to=\"/action-menu-example\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Open in new tab\n                </Link>\n            </p>\n\n            <div className=\"ratio ratio-16x9\">\n                <iframe\n                    src={`${process.env.PUBLIC_URL}/action-menu-example`}\n                    style={style}\n                    title=\"Actions Demo page\"\n                />\n                {/**\n                     * This is how the Code looks like: \n                    import React from \"react\"\n                    import {Page, Body, Header, Actions, MenuItem} from \"blue-react\"\n                    \n                    export const ActionMenuExamplePage = () => {\n                        return (\n                            <Page hasActions={true}>\n                                <Header>\n                                </Header>\n                                <Actions>\n                                    <MenuItem\n                                        icon={\n                                            <svg\n                                                width=\"1em\"\n                                                height=\"1em\"\n                                                viewBox=\"0 0 16 16\"\n                                                className=\"bi bi-bag-fill\"\n                                                fill=\"currentColor\"\n                                                xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path\n                                                    d=\"M1 4h14v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4zm7-2.5A2.5 2.5 0 0 0 5.5 4h-1a3.5 3.5 0 1 1 7 0h-1A2.5 2.5 0 0 0 8 1.5z\"\n                                                />\n                                            </svg>\n                                        }\n                                        label=\"Test\"\n                                    ></MenuItem>\n                                    <MenuItem\n                                        icon={\n                                            <svg\n                                                width=\"1em\"\n                                                height=\"1em\"\n                                                viewBox=\"0 0 16 16\"\n                                                className=\"bi bi-bell-fill\"\n                                                fill=\"currentColor\"\n                                                xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path\n                                                    d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"\n                                                />\n                                            </svg>\n                                        }\n                                        label=\"Test2\"\n                                    >  </MenuItem>\n                                </Actions>\n                                <Body>...</Body>\n                            </Page>\n                        )\n                    }\n                    */}\n            </div>\n        </div>\n    )\n}\n\nexport default ActionMenuExample\n"},"src\\components\\ActionMenuItem.tsx":{"description":"@deprecated This is just an alias for `MenuItem`, so you should use that component instead.\nIf you need the older `ActionMenuItem`, make sure to the prop `useDeprecated`.\nList Item and Link for the current Action Menu.","displayName":"ActionMenuItem","methods":[],"props":{"navItemClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends className of the `.nav-item` element."},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends className of the `.nav-link` element."},"href":{"required":false,"tsType":{"name":"string"},"description":"URL."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e?: any) => void","signature":{"arguments":[{"name":"e","type":{"name":"any"}}],"return":{"name":"void"}}},"description":"onClick Eventhandler."},"icon":{"required":false,"tsType":{"name":"string"},"description":"className for the icon."},"label":{"required":false,"tsType":{"name":"any"},"description":"Label for the link."},"title":{"required":false,"tsType":{"name":"string"},"description":"Tooltip on hover."},"useDeprecated":{"required":false,"tsType":{"name":"boolean"},"description":"Set `true` to use the old ActionMenuItem. Otherwise this component is just an alias to MenuItem."}}},"src\\components\\ActionMenuSwitch.tsx":{"description":"Switch for the Action Menu.","displayName":"ActionMenuSwitch","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"checked":{"required":false,"tsType":{"name":"boolean"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":""},"label":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Actions.tsx":{"description":"@deprecated Please use `ActionMenu` instead.","displayName":"Actions","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":"Content that will appear on the menu when it's expanded."},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends the `className` of `.blue-actions`."},"controlsClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends the `className` of `.blue-actions-controls`."},"featured":{"required":false,"tsType":{"name":"any"},"description":"Content that will appear when the menu is shrunken."},"open":{"required":false,"tsType":{"name":"boolean"},"description":""},"onToggle":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(open: boolean) => void","signature":{"arguments":[{"name":"open","type":{"name":"boolean"}}],"return":{"name":"void"}}},"description":"Will fire when the state of `open` will change inside of the component.\n**Example:** `onToggle={open => this.setState({ open })}`"},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""}},"exampleCode":"import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Switch } from \"blue-react\"\n\nfunction ActionsExample() {\n    const [isChecked, setIsChecked] = useState(false)\n    const toggleIsChecked = () => setIsChecked(!isChecked)\n    const [headerless, setHeaderless] = useState(true)\n    const toggleHeaderless = () => setHeaderless(!headerless)\n\n    const style = {\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\n    }\n\n    return (\n        <div>\n            <Switch\n                className=\"lg me-3\"\n                checked={isChecked}\n                onChange={toggleIsChecked}\n                sliderLabel={isChecked ? \"Mobile\" : \"PC\"}\n            />\n            <Switch\n                className=\"lg\"\n                checked={!headerless}\n                onChange={toggleHeaderless}\n                sliderLabel={\"Header\"}\n            />\n\n            <p>\n                <Link\n                    to={`/actions-example/${headerless ? \"headerless\" : \"\"}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Open in new tab\n                </Link>\n            </p>\n\n            <div className=\"ratio ratio-16x9\">\n                <iframe\n                    src={`${process.env.PUBLIC_URL}/actions-example/${\n                        headerless ? \"headerless\" : \"\"\n                    }`}\n                    style={style}\n                    title=\"Actions Demo page\"\n                />\n                {/**\n                     * This is how the Code looks like: \n                    import React from \"react\"\n                    import {Page, Body, Header, Actions, MenuItem} from \"blue-react\"\n                    \n                    export const ActionsExamplePage = () => {\n                        return (\n                            <Page hasActions={true}>\n                                <Header>\n                                </Header>\n                                <Actions>\n                                    <MenuItem\n                                        icon={\n                                            <svg\n                                                width=\"1em\"\n                                                height=\"1em\"\n                                                viewBox=\"0 0 16 16\"\n                                                className=\"bi bi-bag-fill\"\n                                                fill=\"currentColor\"\n                                                xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path\n                                                    d=\"M1 4h14v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4zm7-2.5A2.5 2.5 0 0 0 5.5 4h-1a3.5 3.5 0 1 1 7 0h-1A2.5 2.5 0 0 0 8 1.5z\"\n                                                />\n                                            </svg>\n                                        }\n                                        label=\"Test\"\n                                    ></MenuItem>\n                                    <MenuItem\n                                        icon={\n                                            <svg\n                                                width=\"1em\"\n                                                height=\"1em\"\n                                                viewBox=\"0 0 16 16\"\n                                                className=\"bi bi-bell-fill\"\n                                                fill=\"currentColor\"\n                                                xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path\n                                                    d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"\n                                                />\n                                            </svg>\n                                        }\n                                        label=\"Test2\"\n                                    >  </MenuItem>\n                                </Actions>\n                                <Body>...</Body>\n                            </Page>\n                        )\n                    }\n                    */}\n            </div>\n        </div>\n    )\n}\n\nexport default ActionsExample\n"},"src\\components\\Body.tsx":{"description":"Contains the content of the page.","displayName":"Body","methods":[],"props":{"id":{"required":false,"tsType":{"name":"string"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"containerClass":{"required":false,"tsType":{"name":"string"},"description":"Class name for the container. More info: https://getbootstrap.com/docs/4.0/layout/overview/#containers"},"hasActions":{"required":false,"tsType":{"name":"boolean"},"description":"Set `true` if this page uses `<Actions />`, so this component will get enough padding to avoid overlapping of the content."},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: any) => void","signature":{"arguments":[{"name":"event","type":{"name":"any"}}],"return":{"name":"void"}}},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""},"rounded":{"required":false,"tsType":{"name":"boolean"},"description":"If `roundedBody` On `Grid` is `true`, rounded corners are already applied for all `Body` components.\nIf it's `false` you can enable it separately with this prop."}}},"src\\components\\Caret.tsx":{"description":"Caret icon component.","displayName":"Caret","methods":[],"props":{"open":{"required":false,"tsType":{"name":"boolean"},"description":"Indicates if open or not."},"mirrored":{"required":false,"tsType":{"name":"boolean"},"description":"By default the caret points to the right when closed. Set mirrored and it will point to the left."},"className":{"required":false,"tsType":{"name":"string"},"description":""}},"exampleCode":"import React from \"react\"\nimport { Caret } from \"blue-react\"\n\nclass CaretExample extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            isOpen: false\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() =>\n                        this.setState({ isOpen: !this.state.isOpen })\n                    }\n                >\n                    <Caret open={this.state.isOpen} />{\" \"}\n                    <span>Click to toggle the caret</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CaretExample\n"},"src\\components\\DocumentView.tsx":{"description":"Tries to display content in an iframe. When the content can't displayed in an iframe, it will show a download button instead.","displayName":"DocumentView","methods":[],"props":{"src":{"required":false,"tsType":{"name":"string"},"description":"Source of the content (URL)","defaultValue":{"value":"\"about:blank\"","computed":false}},"content":{"required":false,"tsType":{"name":"string"},"description":"Instead of a source, you can also set the content directly (HTML)"},"mimeType":{"required":true,"tsType":{"name":"string"},"description":"MIME type of the content (e.g. \"application/pdf\")"},"showDocumentLabel":{"required":false,"tsType":{"name":"string"},"description":"Label for the button to display","defaultValue":{"value":"\"Show document\"","computed":false}}},"exampleCode":"import React from \"react\"\nimport { DocumentView } from \"blue-react\"\n\nclass DocumentViewExample extends React.Component {\n    render() {\n        return (\n            <div>\n                <DocumentView\n                    src=\"/blue-react/v7/example-document.pdf\"\n                    mimeType=\"application/pdf\"\n                />\n            </div>\n        )\n    }\n}\n\nexport default DocumentViewExample\n"},"src\\components\\DropdownMenuItem.tsx":{"description":"Dropdown with button for sidebar.","displayName":"DropdownMenuItem","methods":[],"props":{"to":{"required":false,"tsType":{"name":"string"},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":""},"label":{"required":false,"tsType":{"name":"any"},"description":""},"isActive":{"required":false,"tsType":{"name":"boolean"},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}},"exampleCode":"import React from \"react\"\nimport { DropdownMenuItem, MenuItem } from \"blue-react\"\nimport DropdownMenuItem from \"../../components/DropdownMenuItem\"\n\nclass DropdownMenuItemExample extends React.Component {\n    render() {\n        return (\n            <div\n                className=\"blue-app-sidebar position-relative\"\n                style={{ top: \"0\" }}\n            >\n                <DropdownMenuItem\n                    to=\"#\"\n                    label=\"DropdownMenuItem\"\n                    icon=\"bi-home\"\n                >\n                    <MenuItem href=\"#\" label=\"MenuItem\"></MenuItem>\n                </DropdownMenuItem>\n            </div>\n        )\n    }\n}\n\nexport default DropdownMenuItemExample\n"},"src\\components\\FluentBtn.tsx":{"description":"Shortcut for `<button class=\"fluent-btn\"><div className=\"fluent-btn-ball\"></div></button>`.\nButton with a fancy and fluent acrylic effect.","displayName":"FluentBtn","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":"Content of the button. You can also set all other props you would give a button or a link."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"href":{"required":false,"tsType":{"name":"string"},"description":"If set, it will be an `<a>` element. Otherwise it will be a `<button>`."},"light":{"required":false,"tsType":{"name":"boolean"},"description":"Can be set for buttons with white background. The glow will be a little bit darker than."},"type":{"required":false,"tsType":{"name":"string"},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":""},"style":{"required":false,"tsType":{"name":"any"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e?: any) => void","signature":{"arguments":[{"name":"e","type":{"name":"any"}}],"return":{"name":"void"}}},"description":""}},"exampleCode":"import React from \"react\"\nimport { FluentBtn, Utilities } from \"blue-react\"\nimport FluentBtn from \"../../components/FluentBtn\"\n\nclass FluentBtnExample extends React.Component {\n    componentDidMount() {\n        // Beim normalen Einsatz innerhalb von <Page /> ist folgendes nicht nötig. Nur, wenn <FluentBtn /> z.B. asynchron eingebunden wird.\n        Utilities.registerFluentBtns()\n    }\n\n    render() {\n        return (\n            <div>\n                <FluentBtn className=\"btn btn-primary btn-lg mb-1\">\n                    Hover over this button and see the fancy fluent effect\n                </FluentBtn>\n                <br />\n                <FluentBtn className=\"btn btn-secondary mb-1\">\n                    A secondary button in normal size\n                </FluentBtn>\n                <br />\n                <FluentBtn className=\"btn btn-outline-secondary mb-1\">\n                    A secondary outline button\n                </FluentBtn>\n                <br />\n                <FluentBtn href=\"#\" className=\"btn btn-light mb-1\">\n                    A light button\n                </FluentBtn>\n            </div>\n        )\n    }\n}\n\nexport default FluentBtnExample\n"},"src\\components\\Grid.tsx":{"description":"The main component. As soon this component is mounted, it is globally available under `window.blueGridRef`.\nAlso you can append your own event listeners with `blueGridRef.addEventListener(eventName, (prevProps, prevState) => { })`.\n\nAllowed event listeners:\n\n* **componentDidUpdate** - Component was updated.\n  Example: `blueGridRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })`\n* **pageDidShowAgain** - Page appeared again with the same old state. In the callback function you can reinitialize things.\n  Example: `blueGridRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })`\n* **pageDidHide** - This page disappeared and another page appears instead.\n  Example: `blueGridRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })`","displayName":"Grid","methods":[{"name":"onHashChange","docblock":null,"modifiers":[],"params":[{"name":"event","type":{"name":"HashChangeEvent","alias":"HashChangeEvent"}}],"returns":null},{"name":"defaultProps","docblock":null,"modifiers":["static","get"],"params":[],"returns":null},{"name":"toggleSidebar","docblock":null,"modifiers":[],"params":[{"name":"event","type":{"name":"any"}}],"returns":null},{"name":"hideSidebar","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null},{"name":"initMatch","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"addEventListener","docblock":null,"modifiers":[],"params":[{"name":"param1","type":{"name":"any"}},{"name":"param2","type":{"name":"any"}},{"name":"param3","type":{"name":"any"}}],"returns":null}],"props":{"id":{"required":false,"tsType":{"name":"string"},"description":""},"sidebarIn":{"required":false,"tsType":{"name":"boolean"},"description":""},"style":{"required":false,"tsType":{"name":"CSSProperties"},"description":""},"expandSidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Sidebar is automatically expanded on wider views.","defaultValue":{"value":"false","computed":false}},"hideSidebarMenu":{"required":false,"tsType":{"name":"boolean"},"description":"Disables sidebar.","defaultValue":{"value":"false","computed":false}},"pages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{ name: string; component: JSX.Element }","signature":{"properties":[{"key":"name","value":{"name":"string","required":true}},{"key":"component","value":{"name":"JSX.Element","required":true}}]}}],"raw":"{ name: string; component: JSX.Element }[]"},"description":"Registers pages for the built-in routing system. Example: `[{name: \"home\", component: <HomePage />}]`"},"unrouteable":{"required":false,"tsType":{"name":"boolean"},"description":"When `true`, always the \"home\" route will be rendered.","defaultValue":{"value":"false","computed":false}},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends `className`."},"disableTitleSet":{"required":false,"tsType":{"name":"boolean"},"description":"By default, the document title will automatically set. Set this prop to `true` to disable this behaviour.","defaultValue":{"value":"false","computed":false}},"sidebarToggleIconComponent":{"required":false,"tsType":{"name":"any"},"description":"If you don't use blueicon, you can define another icon element for the sidebar toggle button.","defaultValue":{"value":"<span className=\"bi-menu\" />","computed":false}},"statusIcons":{"required":false,"tsType":{"name":"signature","type":"object","raw":"{\n    danger: any\n    info: any\n    success: any\n    warning: any\n}","signature":{"properties":[{"key":"danger","value":{"name":"any","required":true}},{"key":"info","value":{"name":"any","required":true}},{"key":"success","value":{"name":"any","required":true}},{"key":"warning","value":{"name":"any","required":true}}]}},"description":"Will replace status icons with custom ones. This will also overwrite the `useBlueicons` option.\nThis can be a SVG component or a normal element component.","defaultValue":{"value":"{\n    danger: <span className=\"bi-error\" />,\n    info: <span className=\"bi-information\" />,\n    success: <span className=\"bi-check\" />,\n    warning: <span className=\"bi-sign_warning\" />\n}","computed":false}},"disableHeaders":{"required":false,"tsType":{"name":"boolean"},"description":"Disables the header bars on pages."},"roundedBody":{"required":false,"tsType":{"name":"boolean"},"description":"Rounded corners for all `Body` components.","defaultValue":{"value":"true","computed":false}},"blockRouting":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n    newMatch: string[],\n    currentMatch: string[]\n) => void | boolean","signature":{"arguments":[{"name":"newMatch","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}},{"name":"currentMatch","type":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}}],"return":{"name":"union","raw":"void | boolean","elements":[{"name":"void"},{"name":"boolean"}]}}},"description":"Define a function, that will be fired when switching routes. When your function returns `true`, the default route behaviour will be blocked.\nYou can use something like `window.blueGridRef.setState({ blockRouting: onHashChange })` globally to set the value from anywhere in your app."}}},"src\\components\\Header.tsx":{"description":"The top of a page.","displayName":"Header","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\HeaderActions.tsx":{"description":"@deprecated This component isn't neccessary anymore. Just use `ActionMenu` directly in `Header`.","displayName":"HeaderActions","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"breakpoint":{"required":false,"tsType":{"name":"breakOption"},"description":"@deprecated Use `break` prop instead."},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\HeaderTitle.tsx":{"description":"The title area at the header bar.\nDepending on its content, the document's title will be set aswell (what will be shown in the browser title bar).","displayName":"HeaderTitle","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"appTitle":{"required":false,"tsType":{"name":"string"},"description":"Text next to the logo."},"keepAppTitle":{"required":false,"tsType":{"name":"boolean"},"description":"Disables that the app title will disappear at a specific view width."},"children":{"required":false,"tsType":{"name":"any"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends `className` from parent element."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is the component used on the sidebar?"}}},"src\\components\\Intro.tsx":{"description":"Can be used for a sign-in page.","displayName":"Intro","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"logoMaxWidth":{"required":false,"tsType":{"name":"string"},"description":"Max width from the logo.","defaultValue":{"value":"\"100px\"","computed":false}},"title":{"required":false,"tsType":{"name":"string"},"description":"Text which will be placed under the logo."},"children":{"required":false,"tsType":{"name":"any"},"description":"Content"}}},"src\\components\\MenuItem.tsx":{"description":"Link, button or custom component for Sidebar, Actions or ActionMenu","displayName":"MenuItem","methods":[],"props":{"to":{"required":false,"tsType":{"name":"string"},"description":"Sets `to` prop, e.g. when you use the `NavLink` component from React Router."},"exact":{"required":false,"tsType":{"name":"boolean"},"description":"Prop for components by React Router."},"href":{"required":false,"tsType":{"name":"string"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"}}],"return":{"name":"void"}}},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":"Icon component or a class name."},"iconForActive":{"required":false,"tsType":{"name":"any"},"description":"Icon component or a class name when the MenuItem is active."},"label":{"required":false,"tsType":{"name":"any"},"description":"Label of the link."},"isActive":{"required":false,"tsType":{"name":"boolean"},"description":"Should be set as active."},"isHome":{"required":false,"tsType":{"name":"boolean"},"description":"When using Blue React's routing system: define this link as home page link."},"dropdownClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends class name of the dropdown menu."},"children":{"required":false,"tsType":{"name":"any"},"description":"Set children to create a nested `MenuItem` as a dropdown."},"className":{"required":false,"tsType":{"name":"any"},"description":"Defines class name."},"showDropdown":{"required":false,"tsType":{"name":"boolean"},"description":"Defines dropdown status from outside."},"supportOutside":{"required":false,"tsType":{"name":"boolean"},"description":"Close on click outside."},"elementType":{"required":false,"tsType":{"name":"any"},"description":"By default, MenuItem is a `\"button\"</button>. If you set a `href`, it's a `\"a\"`.\nIf you want to have it another type, you can pass a component reference with this prop (e.g. `Link`)."},"target":{"required":false,"tsType":{"name":"string"},"description":""},"rel":{"required":false,"tsType":{"name":"string"},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":""}}},"src\\components\\Modal.tsx":{"description":"Simple modal/dialog. Designed to work as an alternative to JavaScript's native `alert()`, `prompt()` and `confirm()` functions.\nIt uses Bootstrap's Modal components.\n\nFor easy use, you should use the hook `useModal` together with `ModalProvider`. See the example below.","displayName":"Modal","methods":[],"props":{"modalContent":{"required":false,"tsType":{"name":"string"},"description":""},"unSetModalContent":{"required":true,"tsType":{"name":"signature","type":"function","raw":"(modalContent?: string) => void","signature":{"arguments":[{"name":"modalContent","type":{"name":"string"}}],"return":{"name":"void"}}},"description":""},"onSubmit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(input: string | boolean | null) => void","signature":{"arguments":[{"name":"input","type":{"name":"union","raw":"string | boolean | null","elements":[{"name":"string"},{"name":"boolean"},{"name":"null"}]}}],"return":{"name":"void"}}},"description":"Type of `input` depends on `type` prop and which action occured.\nWhen it's a string, the user entered something. When it's a boolean, the user clicked \"Yes\" or \"No\".\nWhen it's `null`, the user cancelled the modal."},"defaultInput":{"required":false,"tsType":{"name":"string"},"description":""},"type":{"required":true,"tsType":{"name":"ModalType"},"description":"`\"ask\"` | `\"tell\"` | `\"verify\"`"}},"exampleCode":"import { FluentBtn, ModalProvider, useModal } from \"blue-react\"\nimport FluentBtn from \"../../components/FluentBtn\"\n\nfunction InsideComp() {\n    // Use the `useModal` hook.\n    const { tell, verify, ask } = useModal()\n\n    return (\n        <div className=\"d-flex gap-2\">\n            <FluentBtn\n                className=\"btn btn-outline-secondary\"\n                onClick={() => {\n                    tell(\"Hey, what's up\")\n                }}\n            >\n                tell\n            </FluentBtn>\n\n            <FluentBtn\n                className=\"btn btn-outline-secondary\"\n                onClick={\n                    // Make sure to make your function \"async\" when using \"await\"\n                    async () => {\n                        // Use \"await\" to wait until the user enters something\n                        const answer = await ask(\"What is 1 + 1?\")\n                        if (answer && parseInt(answer.toString()) === 2) {\n                            tell(\"That's correct!\")\n                        } else {\n                            tell(\"Wrong!\")\n                        }\n                    }\n                }\n            >\n                ask\n            </FluentBtn>\n\n            <FluentBtn\n                className=\"btn btn-outline-secondary\"\n                onClick={async () => {\n                    const answer = await verify(\"Are you sure?\")\n                    console.log({ answer })\n                    if (answer === true) {\n                        tell(\"So, you're sure\")\n                    }\n                }}\n            >\n                verify\n            </FluentBtn>\n\n            <FluentBtn\n                className=\"btn btn-secondary\"\n                onClick={async () => {\n                    const name = await ask(\"What is your name?\")\n                    console.log(name)\n                    if (name) {\n                        const retVal = await tell(\"Hello, \" + name)\n                        console.log(retVal)\n\n                        if (await verify(\"Is everything alright?\")) {\n                            await tell(\"Oh, nice\")\n                        } else {\n                            await tell(\"Oh no :(\")\n                        }\n                    }\n                }}\n            >\n                Start a conversation\n            </FluentBtn>\n        </div>\n    )\n}\n\n/**\n * Your component where you use `useModal` has to be wrapped around `<ModalProvider></ModalProvider>`.\n * Best practice is to wrap it around your root component.\n */\nexport default function ModalExample() {\n    return (\n        <ModalProvider>\n            <InsideComp />\n        </ModalProvider>\n    )\n}\n"},"src\\components\\Outside.tsx":{"description":"Component that fires an event if you click outside of it","displayName":"Outside","methods":[],"props":{"children":{"required":true,"tsType":{"name":"any"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"onClickOutside":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"MouseEvent"}}],"return":{"name":"void"}}},"description":""}}},"src\\components\\Page.tsx":{"description":"Main component for each page.","displayName":"Page","methods":[],"props":{"title":{"required":false,"tsType":{"name":"string"},"description":"Will be set to the document's `<title>` tag."},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Search.tsx":{"description":"A search bar that can be placed to the sidebar or on a page.","displayName":"Search","methods":[],"props":{"autoFocus":{"required":false,"tsType":{"name":"boolean"},"description":""},"body":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of a page?"},"className":{"required":false,"tsType":{"name":"string"},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}}],"return":{"name":"void"}}},"description":""},"onSubmit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FormEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactFormEvent","raw":"React.FormEvent"}}],"return":{"name":"void"}}},"description":""},"placeholder":{"required":false,"tsType":{"name":"string"},"description":""},"reset":{"required":false,"tsType":{"name":"boolean"},"description":"Allow reset?"},"resetIcon":{"required":false,"tsType":{"name":"any"},"description":"Define custom icon for the reset button."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of the sidebar?"},"value":{"required":false,"tsType":{"name":"string"},"description":""}},"exampleCode":"import React from \"react\"\nimport { Search } from \"blue-react\"\n\nclass SearchExample extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            search: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Search\n                    body\n                    className=\"w-50\"\n                    onChange={({ target }) =>\n                        this.setState({ search: target.value })\n                    }\n                    onSubmit={() => alert(\"Do form submit now!\")}\n                    placeholder=\"Begin typing...\"\n                    reset\n                    value={this.state.search}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SearchExample\n"},"src\\components\\SidebarMenu.tsx":{"description":"Sidebar for the `Grid` component.","displayName":"SidebarMenu","methods":[],"props":{"fluent":{"required":false,"tsType":{"name":"boolean"},"description":"Should menu items have a Fluent effect. Default: `true`"},"sidebarClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the sidebar."},"sidebarStyle":{"required":false,"tsType":{"name":"object"},"description":"Sets the `style` prop by the sidebar."},"menuClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the menu."},"menuStyle":{"required":false,"tsType":{"name":"object"},"description":"Sets the `style` prop by the menu."},"topContent":{"required":false,"tsType":{"name":"any"},"description":"Content on top of the menu."},"bottomContent":{"required":false,"tsType":{"name":"any"},"description":"Content for the bottom part of the sidebar."},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Switch.tsx":{"description":"Switch.","displayName":"Switch","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"checked":{"required":false,"tsType":{"name":"boolean"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}}],"return":{"name":"void"}}},"description":""},"sliderLabel":{"required":false,"tsType":{"name":"string"},"description":"Sets label inside of the switch. If you set this, you should also set the className \"lg\" to make the switch larger."},"elementType":{"required":false,"tsType":{"name":"string"},"description":"You can change the type of the wrapper element. If you do, the `onChange` event might not be triggered.","defaultValue":{"value":"\"label\"","computed":false}},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":""}},"exampleCode":"import React from \"react\"\nimport { Switch } from \"blue-react\"\n\nclass SwitchExample extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            isChecked: true\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Switch\n                    className=\"lg\"\n                    checked={this.state.isChecked}\n                    onChange={() =>\n                        this.setState({ isChecked: !this.state.isChecked })\n                    }\n                    sliderLabel={this.state.isChecked ? \"Yay🎉\" : \"😒\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SwitchExample\n"}}