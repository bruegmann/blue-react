{
    "src\\components\\ActionMenu.js": {
        "description": "<span class=\"badge badge-secondary\">Info</span> You can also use <strong>Actions</strong> instead.<br>\r\nThe Action Menu on the top right of a page. You can place Actions here which are in context of the current page.",
        "displayName": "ActionMenu",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleActions",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "initToggleStatus",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "hideToggleAction": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Hides the three points in mobile view.\r\nCan be useful when you use multiple ActionMenus, but don't want all of them have the toggle button.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "src\\components\\ActionMenuItem.js": {
        "description": "List Item and Link for the current Action Menu.",
        "displayName": "ActionMenuItem",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "navItemClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends className of the <code>.nav-item</code> element.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends className of the <code>.nav-link</code> element.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"javascript:void(0)\"",
                    "computed": false
                }
            },
            "icon": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "className for the icon."
            },
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Label for the link."
            },
            "title": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Tooltip on hover."
            }
        }
    },
    "src\\components\\ActionMenuSwitch.js": {
        "description": "<span class=\"badge badge-secondary\">Deprecated</span> When using <strong>Actions</strong>, please use <strong>SwitchMenuItem</strong> instead.<br>\r\nSwitch for the Action Menu.",
        "displayName": "ActionMenuSwitch",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "checked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": ""
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": ""
            },
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Label of the control"
            },
            "href": {
                "defaultValue": {
                    "value": "\"javascript:void(0)\"",
                    "computed": false
                },
                "required": false
            }
        }
    },
    "src\\components\\Actions.js": {
        "description": "The new actions menu, better optimized for mobile devices.<br>\r\n<strong>Important:</strong> If you use <code>&lt;Actions /&gt;</code> on a page, make sure also to set <strong>hasActions</strong> prop from\r\n<strong>Page</strong> component to <code>true</code>.",
        "displayName": "Actions",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggle",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Content that will appear on the menu when it's expanded."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends the <code>className</code> of <code>.blue-actions</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "controlsClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends the <code>className</code> of <code>.blue-actions-controls</code>.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "featured": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Content that will appear when the menu is shrunken."
            },
            "open": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "onToggle": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "Will fire when the state of <code>open</code> will change inside of the component.<br>\r\n<strong>Example:</strong> <code>onToggle={open => this.setState({ open })}</code>"
            },
            "break": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "<code>sm</code>, <code>md</code>, <code>lg</code> or <code>xl</code>",
                "defaultValue": {
                    "value": "\"md\"",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React, { useState } from \"react\"\r\nimport Switch from \"../../components/Switch\"\r\n\r\nfunction ActionsExample() {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const toggleIsChecked = () => setIsChecked(!isChecked)\r\n    const [headerless, setHeaderless] = useState(true)\r\n    const toggleHeaderless = () => setHeaderless(!headerless)\r\n\r\n    const style = {\r\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Switch\r\n                className=\"lg mr-3\"\r\n                checked={isChecked}\r\n                onChange={toggleIsChecked}\r\n                sliderLabel={isChecked ? \"Mobile\" : \"PC\"}\r\n            />\r\n            <Switch\r\n                className=\"lg\"\r\n                checked={!headerless}\r\n                onChange={toggleHeaderless}\r\n                sliderLabel={\"Header\"}\r\n            />\r\n            <div className=\"embed-responsive embed-responsive-16by9\" >\r\n                <iframe\r\n                    src={`${process.env.PUBLIC_URL}/actions-example/${headerless ? \"headerless\" : \"\"}`}\r\n                    className=\"embed-responsive-item\"\r\n                    style={style}\r\n                    title=\"Actions Demo page\"\r\n                />\r\n                {\r\n                    /**\r\n                     * This is how the Code looks like: \r\n                    import React from \"react\";\r\n                    import {Page, Body, Header, Actions, MenuItem} from \"blue-react\";\r\n                    \r\n                    export const ActionsExamplePage = () => {\r\n                        return (\r\n                            <Page hasActions={true}>\r\n                                <Header>\r\n                                </Header>\r\n                                <Actions>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bag-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M1 4h14v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4zm7-2.5A2.5 2.5 0 0 0 5.5 4h-1a3.5 3.5 0 1 1 7 0h-1A2.5 2.5 0 0 0 8 1.5z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test\"\r\n                                    ></MenuItem>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bell-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test2\"\r\n                                    >  </MenuItem>\r\n                                </Actions>\r\n                                <Body>...</Body>\r\n                            </Page>\r\n                        )\r\n                    }\r\n                    */\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActionsExample;"
    },
    "src\\components\\Body.js": {
        "description": "Contains the content of the page.",
        "displayName": "Body",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "id": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": ""
            },
            "containerClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Sets the class name for the container. For more information about container: https://getbootstrap.com/docs/4.5/layout/overview/#containers",
                "defaultValue": {
                    "value": "\"container-fluid\"",
                    "computed": false
                }
            },
            "hasActions": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Set <code>true</code> if this page uses <code>/lt;Actions /&gt;</code>, so this component will get enough padding to avoid overlapping of the content.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "break": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "<code>sm</code>, <code>md</code>, <code>lg</code> or <code>xl</code>",
                "defaultValue": {
                    "value": "\"md\"",
                    "computed": false
                }
            }
        }
    },
    "src\\components\\Caret.js": {
        "description": "Caret icon component.",
        "displayName": "Caret",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "open": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Indicates if open or not.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "mirrored": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "By default the caret points to the right when closed. Set mirrored and it will point to the left.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport Caret from \"../../components/Caret\";\r\n\r\nclass CaretExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => this.setState({ isOpen: !this.state.isOpen })}\r\n                >\r\n                    <Caret\r\n                        open={this.state.isOpen}\r\n                    />\r\n                    {\" \"}<span>Click to toggle the caret</span>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaretExample;"
    },
    "src\\components\\DocumentView.js": {
        "description": "Tries to display content in an iframe. When the content can't displayed in an iframe, it will show a download button instead.",
        "displayName": "DocumentView",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "supportsIframe",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "src": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Source of the content (URL)",
                "defaultValue": {
                    "value": "\"about:blank\"",
                    "computed": false
                }
            },
            "content": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Instead of a source, you can also set the content directly (HTML)"
            },
            "mimeType": {
                "type": {
                    "name": "string"
                },
                "required": true,
                "description": "MIME type of the content (e.g. \"application/pdf\")"
            },
            "showDocumentLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Label for the button to display",
                "defaultValue": {
                    "value": "\"Show document\"",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport DocumentView from \"../../components/DocumentView\";\r\n\r\nclass DocumentViewExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DocumentView\r\n                    src=\"http://www.pdf995.com/samples/pdf.pdf\"\r\n                    mimeType=\"application/pdf\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DocumentViewExample;"
    },
    "src\\components\\DropdownMenuItem.js": {
        "description": "Dropdown-Button und Link für die Sidebar.",
        "displayName": "DropdownMenuItem",
        "methods": [
            {
                "name": "handleClick",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Beschriftung des Links"
            },
            "isActive": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Soll Item als \"aktiv\" markiert werden? Ist die to-Property gesetzt, wird Item automatisch als \"aktiv\" markiert, wenn entsprechende Seite aktiv ist."
            },
            "to": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Setzt to-Property der NavLink-Komponente aus React Router."
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Werden in einem Dropdown-Menü angezeigt."
            },
            "icon": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Klasse eines Icons oder Element, z.B. von blueicon-colored."
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport MenuItem from \"../../components/MenuItem\";\r\nimport DropdownMenuItem from \"../../components/DropdownMenuItem\";\r\n\r\n\r\nclass DropdownMenuItemExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"blue-app-sidebar position-relative\" style={{ top: \"0\" }}>\r\n                <DropdownMenuItem to=\"#\" label=\"DropdownMenuItem\" icon=\"bi-home\">\r\n                    <MenuItem href=\"#\" label=\"MenuItem\"></MenuItem>\r\n                </DropdownMenuItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropdownMenuItemExample;"
    },
    "src\\components\\FluentBtn.js": {
        "description": "Shortcut for <code>&lt;button class=\"fluent-btn\"&gt;&lt;div className=\"fluent-btn-ball\"&gt;&lt;/div&gt;&lt;/button&gt;</code>.\r\nButton with a fancy and fluent acrylic effect.",
        "displayName": "FluentBtn",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Content of the button. You can also set all other props you would give a button or a link."
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "If set, it will be an <code>&lt;a&gt;</code> element. Otherwise it will be a <code>&lt;button&gt;</code>."
            },
            "light": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Can be set for buttons with white background. The glow will be a little bit darker than.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport Utilities from \"../../components/Utilities\";\r\nimport FluentBtn from \"../../components/FluentBtn\";\r\n\r\nclass FluentBtnExample extends React.Component {\r\n    componentDidMount() {\r\n        // Beim normalen Einsatz innerhalb von <Page /> ist folgendes nicht nötig. Nur, wenn <FluentBtn /> z.B. asynchron eingebunden wird.\r\n        Utilities.registerFluentBtns();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FluentBtn\r\n                    className=\"btn btn-primary btn-lg\"\r\n                >\r\n                    Hover over this button and see the fancy fluent effect\r\n                </FluentBtn>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FluentBtnExample;"
    },
    "src\\components\\Grid.js": {
        "description": "Das Grundgerüst. Sobald diese Komponente gemountet wurde, ist sie global über <code>window.blueGridRef</code> zugreifbar.<br>\r\nAußerdem kann über <code>blueGridRef.addEventListener(eventName, (prevProps, prevState) => { })</code> ein Event-Listener angefügt werden.\r\n<br><br>\r\nErlaubte Event-Listener:\r\n<table class=\"table\">\r\n<thead><tr><th>Event name</th><th>Description</th><th>Beispiel</th></tr></thead>\r\n<tbody>\r\n<tr>\r\n<th>componentDidUpdate</th>\r\n<td>Komponente wurde aktualisiert.</td>\r\n<td><code>blueGridRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidShowAgain</th>\r\n<td>Seite wurde erneut angezeigt, mit altem Stand. Im Callback kann Komponente neu initialisiert werden.</td>\r\n<td><code>blueGridRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n\r\n<tr>\r\n<th>pageDidHide</th>\r\n<td>Seite wurde versteckt (andere Seite wurde angezeigt).</td>\r\n<td><code>blueGridRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })</code></td>\r\n</tr>\r\n</tbody>\r\n</table>",
        "displayName": "Grid",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "hideSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "e",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "initMatch",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            },
            {
                "name": "addEventListener",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "param1",
                        "type": null
                    },
                    {
                        "name": "param2",
                        "type": null
                    },
                    {
                        "name": "param3",
                        "type": null
                    }
                ],
                "returns": null
            }
        ],
        "props": {
            "expandSidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Die Sidebar ist bei Vollbild automatisch eingeklappt.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "hideSidebarMenu": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Deaktiviert die Sidebar.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "pages": {
                "type": {
                    "name": "array"
                },
                "required": false,
                "description": "Registriert Seiten. Beispiel: [{name: \"home\", component: <HomePage />}]"
            },
            "unrouteable": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Wenn <code>true</code> wird immer die \"home\"-Route geladen.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Erweitert die <code>className</code>-Eigenschaft."
            },
            "disableTitleSet": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Normalerweise wird der Dokumenten-Titel automatisch gesetzt. Setze diese Property auf <code>true</code> um das zu\r\ndeaktivieren.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "sidebarToggleIconComponent": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "If you don't use blueicon, you can define another icon element for the sidebar toggle button.",
                "defaultValue": {
                    "value": "<span className=\"bi-menu\" />",
                    "computed": false
                }
            },
            "statusIcons": {
                "type": {
                    "name": "shape",
                    "value": {
                        "danger": {
                            "name": "any",
                            "required": false
                        },
                        "info": {
                            "name": "any",
                            "required": false
                        },
                        "success": {
                            "name": "any",
                            "required": false
                        },
                        "warning": {
                            "name": "any",
                            "required": false
                        }
                    }
                },
                "required": false,
                "description": "Will replace status icons with custom ones. This can be a SVG component or a normal element component.",
                "defaultValue": {
                    "value": "{\r\n    danger: <span className=\"bi-error\" />,\r\n    info: <span className=\"bi-information\" />,\r\n    success: <span className=\"bi-check\" />,\r\n    warning: <span className=\"bi-sign_warning\" />\r\n}",
                    "computed": false
                }
            },
            "disableHeaders": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Disables the header bars on pages."
            }
        }
    },
    "src\\components\\Header.js": {
        "description": "The top of a page.",
        "displayName": "Header",
        "methods": []
    },
    "src\\components\\HeaderActions.js": {
        "description": "Hier werden z.B. Buttons für die aktuelle Seite platziert.",
        "displayName": "HeaderActions",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "breakpoint": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Legt fest, ab welcher Breite umgebrochen wird. Mögliche Werte: <code>\"sm\"</code> (768px), <code>\"md\"</code> (992px), <code>\"lg\"</code> (1200px)",
                "defaultValue": {
                    "value": "\"sm\"",
                    "computed": false
                }
            }
        }
    },
    "src\\components\\HeaderTitle.js": {
        "description": "Der Titel-Bereich in der Kopf-Leiste.\r\nAnhand dessen wird auch der Dokumenten-Titel gesetzt (was in der Browser Titelzeile gezeigt wird).",
        "displayName": "HeaderTitle",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "setDocumentTitle",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "logo": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann ein Bild sein. Wird im src-Attribute implementiert."
            },
            "appTitle": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Der Text, der neben dem Logo steht."
            },
            "keepAppTitle": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Deaktiviert, dass der App-Titel bei bestimmer Bildschirmgröße ausgeblendet wird.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Extends `className` from parent element."
            },
            "sidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Is the component used on the sidebar?"
            }
        }
    },
    "src\\components\\Intro.js": {
        "description": "Geeignet als Login-Bildschirm.",
        "displayName": "Intro",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "logo": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann ein Bild sein. Wird im src-Attribute implementiert."
            },
            "logoMaxWidth": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Maximale Breite des Logos.",
                "defaultValue": {
                    "value": "\"100px\"",
                    "computed": false
                }
            },
            "title": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Der Text, der unter dem Logo erscheint"
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Inhalt"
            }
        }
    },
    "src\\components\\MenuItem.js": {
        "description": "List-Item und Link für die Sidebar.",
        "displayName": "MenuItem",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "onClick",
                "docblock": null,
                "modifiers": [],
                "params": [
                    {
                        "name": "event",
                        "type": null
                    }
                ],
                "returns": null
            },
            {
                "name": "checkActive",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "to": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Setzt to-Property der NavLink-Komponente aus React Router."
            },
            "href": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Kann als Alternative zu to benutzt werden.",
                "defaultValue": {
                    "value": "\"#\"",
                    "computed": false
                }
            },
            "onClick": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "onClick Event"
            },
            "icon": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Klasse eines Icons oder Element, z.B. von blueicon-colored."
            },
            "label": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Beschriftung des Links"
            },
            "isActive": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Soll Item als \"aktiv\" markiert werden? Ist die to-Property gesetzt, wird Item automatisch als \"aktiv\" markiert, wenn entsprechende Seite aktiv ist.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "isHome": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Als MenuItem für Startseite deklariert."
            },
            "dropdownClassName": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Ergänzung der Klasse vom Dropdown-Menü.",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "children": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Werden in einem Dropdown-Menü angezeigt."
            },
            "showDropdown": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Defines dropdown status from outside.",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        }
    },
    "src\\components\\Page.js": {
        "description": "",
        "displayName": "Page",
        "methods": [],
        "props": {
            "hasActions": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "@deprecated This isn't necessary anymore to use Actions on a page."
            },
            "title": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Will be set to the document's `<title>` tag."
            }
        }
    },
    "src\\components\\Search.js": {
        "description": "Eine Suchleiste, die zur Seitenleiste hinzugefügt werden kann.",
        "displayName": "Search",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "toggleSidebar",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "autoFocus": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "body": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Wird Komponente im Body genutzt?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "icon": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "<span><svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-search mt-n1\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path fillRule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\" />\r\n    <path fillRule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\" />\r\n</svg></span>",
                    "computed": false
                }
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "(event) => { }",
                    "computed": false
                }
            },
            "onSubmit": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "(event) => { }",
                    "computed": false
                }
            },
            "placeholder": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "reset": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Erlaube Zurücksetzen?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "sidebar": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Wird Komponente in der Sidebar genutzt?",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "value": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport Search from \"../../components/Search\";\r\n\r\nclass SearchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            search: \"\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    body\r\n                    className=\"w-50\"\r\n                    onChange={({ target }) => this.setState({ search: target.value })}\r\n                    onSubmit={() => alert(\"Do form submit now!\")}\r\n                    placeholder=\"Begin typing...\"\r\n                    reset\r\n                    value={this.state.search}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchExample;"
    },
    "src\\components\\SidebarMenu.js": {
        "description": "Die Seitenleiste für das Grid.",
        "displayName": "SidebarMenu",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            },
            {
                "name": "updateDimensions",
                "docblock": null,
                "modifiers": [],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "fluent": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "Should menu items have a Fluent effect. Default: `true`",
                "defaultValue": {
                    "value": "true",
                    "computed": false
                }
            },
            "sidebarClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Erweiterung der className-Property der Seitenleiste."
            },
            "sidebarStyle": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Setzt die style-Property der Seitenleiste."
            },
            "menuClass": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Erweiterung der className-Property des Menüs."
            },
            "menuStyle": {
                "type": {
                    "name": "object"
                },
                "required": false,
                "description": "Setzt die style-Property des Menüs."
            },
            "topContent": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Inhalte oberhalb des Sidebar-Menüs"
            },
            "bottomContent": {
                "type": {
                    "name": "any"
                },
                "required": false,
                "description": "Inhalte für den Footer der Sidebar"
            }
        }
    },
    "src\\components\\Switch.js": {
        "description": "Switch.",
        "displayName": "Switch",
        "methods": [
            {
                "name": "defaultProps",
                "docblock": null,
                "modifiers": [
                    "static",
                    "get"
                ],
                "params": [],
                "returns": null
            }
        ],
        "props": {
            "className": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "\"\"",
                    "computed": false
                }
            },
            "checked": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            },
            "onChange": {
                "type": {
                    "name": "func"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "() => { }",
                    "computed": false
                }
            },
            "sliderLabel": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "Sets label inside of the switch. If you set this, you should also set the className \"lg\" to make the switch larger.",
                "defaultValue": {
                    "value": "null",
                    "computed": false
                }
            },
            "elementType": {
                "type": {
                    "name": "string"
                },
                "required": false,
                "description": "You can change the type of the wrapper element. If you do, the <code>onChange</code> event might not be triggered.",
                "defaultValue": {
                    "value": "\"label\"",
                    "computed": false
                }
            },
            "disabled": {
                "type": {
                    "name": "bool"
                },
                "required": false,
                "description": "",
                "defaultValue": {
                    "value": "false",
                    "computed": false
                }
            }
        },
        "exampleCode": "import React from \"react\";\r\nimport Switch from \"../../components/Switch\";\r\n\r\nclass SwitchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isChecked: true\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Switch\r\n                    className=\"lg\"\r\n                    checked={this.state.isChecked}\r\n                    onChange={() => this.setState({ isChecked: !this.state.isChecked })}\r\n                    sliderLabel={this.state.isChecked ? \"Yay🎉\" : \"😒\"}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SwitchExample;"
    },
    "src\\components\\SwitchMenuItem.js": {
        "description": "Switch for <strong>Actions</strong>",
        "displayName": "SwitchMenuItem",
        "methods": [],
        "composes": [
            "./Switch.js"
        ]
    }
}