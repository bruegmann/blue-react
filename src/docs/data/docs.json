{"src\\components\\ActionMenu.tsx":{"description":"You can also use `Actions` instead.\r\nThe Action Menu on the top right of a page. You can place Actions here which are in context of the current page.","displayName":"ActionMenu","methods":[],"props":{"hideToggleAction":{"required":false,"tsType":{"name":"boolean"},"description":"Hides the toggle button in mobile view. Can be useful when using multiple ActionMenus and not show the toggle button for each menu."},"children":{"required":false,"tsType":{"name":"any"},"description":""},"toggleIcon":{"required":false,"tsType":{"name":"any"},"description":"Icon component for the toggle icon."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"break":{"required":false,"tsType":{"name":"union","raw":"breakOption | \"none\"","elements":[{"name":"breakOption"},{"name":"literal","value":"\"none\""}]},"description":"\"sm\" | \"md\" | \"lg\" | \"xl\" | \"none\""}},"exampleCode":"import React, { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Switch from \"../../components/Switch\"\r\n\r\nfunction ActionMenuExample() {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const toggleIsChecked = () => setIsChecked(!isChecked)\r\n\r\n    const style = {\r\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Switch\r\n                className=\"lg mr-3\"\r\n                checked={isChecked}\r\n                onChange={toggleIsChecked}\r\n                sliderLabel={isChecked ? \"Mobile\" : \"PC\"}\r\n            />\r\n\r\n            <p>\r\n                <Link to=\"/action-menu-example\" target=\"_blank\" rel=\"noopener noreferrer\">Open in new tab</Link>\r\n            </p>\r\n\r\n            <div className=\"embed-responsive embed-responsive-16by9\" >\r\n                <iframe\r\n                    src={`${process.env.PUBLIC_URL}/action-menu-example`}\r\n                    className=\"embed-responsive-item\"\r\n                    style={style}\r\n                    title=\"Actions Demo page\"\r\n                />\r\n                {\r\n                    /**\r\n                     * This is how the Code looks like: \r\n                    import React from \"react\";\r\n                    import {Page, Body, Header, Actions, MenuItem} from \"blue-react\";\r\n                    \r\n                    export const ActionMenuExamplePage = () => {\r\n                        return (\r\n                            <Page hasActions={true}>\r\n                                <Header>\r\n                                </Header>\r\n                                <Actions>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bag-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M1 4h14v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4zm7-2.5A2.5 2.5 0 0 0 5.5 4h-1a3.5 3.5 0 1 1 7 0h-1A2.5 2.5 0 0 0 8 1.5z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test\"\r\n                                    ></MenuItem>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bell-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test2\"\r\n                                    >  </MenuItem>\r\n                                </Actions>\r\n                                <Body>...</Body>\r\n                            </Page>\r\n                        )\r\n                    }\r\n                    */\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActionMenuExample;"},"src\\components\\ActionMenuItem.tsx":{"description":"@deprecated This is just an alias for `MenuItem`, so you should use that component instead.\r\nIf you need the older `ActionMenuItem`, make sure to the prop `useDeprecated`.\r\nList Item and Link for the current Action Menu.","displayName":"ActionMenuItem","methods":[],"props":{"navItemClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends className of the `.nav-item` element."},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends className of the `.nav-link` element."},"href":{"required":false,"tsType":{"name":"string"},"description":"URL."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e?: any) => void","signature":{"arguments":[{"name":"e","type":{"name":"any"}}],"return":{"name":"void"}}},"description":"onClick Eventhandler."},"icon":{"required":false,"tsType":{"name":"string"},"description":"className for the icon."},"label":{"required":false,"tsType":{"name":"any"},"description":"Label for the link."},"title":{"required":false,"tsType":{"name":"string"},"description":"Tooltip on hover."},"useDeprecated":{"required":false,"tsType":{"name":"boolean"},"description":"Set `true` to use the old ActionMenuItem. Otherwise this component is just an alias to MenuItem."}}},"src\\components\\ActionMenuSwitch.tsx":{"description":"Switch for the Action Menu.","displayName":"ActionMenuSwitch","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"checked":{"required":false,"tsType":{"name":"boolean"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":""},"label":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Actions.tsx":{"description":"An alternative to `ActionMenu`.","displayName":"Actions","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":"Content that will appear on the menu when it's expanded."},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends the `className` of `.blue-actions`."},"controlsClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends the `className` of `.blue-actions-controls`."},"featured":{"required":false,"tsType":{"name":"any"},"description":"Content that will appear when the menu is shrunken."},"open":{"required":false,"tsType":{"name":"boolean"},"description":""},"onToggle":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(open: boolean) => void","signature":{"arguments":[{"name":"open","type":{"name":"boolean"}}],"return":{"name":"void"}}},"description":"Will fire when the state of `open` will change inside of the component.\r\n**Example:** `onToggle={open => this.setState({ open })}`"},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""}},"exampleCode":"import React, { useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Switch from \"../../components/Switch\"\r\n\r\nfunction ActionsExample() {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const toggleIsChecked = () => setIsChecked(!isChecked)\r\n    const [headerless, setHeaderless] = useState(true)\r\n    const toggleHeaderless = () => setHeaderless(!headerless)\r\n\r\n    const style = {\r\n        width: isChecked && window.innerWidth > 600 ? \"600px\" : \"\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Switch\r\n                className=\"lg mr-3\"\r\n                checked={isChecked}\r\n                onChange={toggleIsChecked}\r\n                sliderLabel={isChecked ? \"Mobile\" : \"PC\"}\r\n            />\r\n            <Switch\r\n                className=\"lg\"\r\n                checked={!headerless}\r\n                onChange={toggleHeaderless}\r\n                sliderLabel={\"Header\"}\r\n            />\r\n\r\n\r\n            <p>\r\n                <Link to={`/actions-example/${headerless ? \"headerless\" : \"\"}`} target=\"_blank\" rel=\"noopener noreferrer\">Open in new tab</Link>\r\n            </p>\r\n\r\n            <div className=\"embed-responsive embed-responsive-16by9\" >\r\n                <iframe\r\n                    src={`${process.env.PUBLIC_URL}/actions-example/${headerless ? \"headerless\" : \"\"}`}\r\n                    className=\"embed-responsive-item\"\r\n                    style={style}\r\n                    title=\"Actions Demo page\"\r\n                />\r\n                {\r\n                    /**\r\n                     * This is how the Code looks like: \r\n                    import React from \"react\";\r\n                    import {Page, Body, Header, Actions, MenuItem} from \"blue-react\";\r\n                    \r\n                    export const ActionsExamplePage = () => {\r\n                        return (\r\n                            <Page hasActions={true}>\r\n                                <Header>\r\n                                </Header>\r\n                                <Actions>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bag-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M1 4h14v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4zm7-2.5A2.5 2.5 0 0 0 5.5 4h-1a3.5 3.5 0 1 1 7 0h-1A2.5 2.5 0 0 0 8 1.5z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test\"\r\n                                    ></MenuItem>\r\n                                    <MenuItem\r\n                                        icon={\r\n                                            <svg\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                className=\"bi bi-bell-fill\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path\r\n                                                    d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"\r\n                                                />\r\n                                            </svg>\r\n                                        }\r\n                                        label=\"Test2\"\r\n                                    >  </MenuItem>\r\n                                </Actions>\r\n                                <Body>...</Body>\r\n                            </Page>\r\n                        )\r\n                    }\r\n                    */\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActionsExample;"},"src\\components\\Body.tsx":{"description":"Contains the content of the page.","displayName":"Body","methods":[],"props":{"id":{"required":false,"tsType":{"name":"string"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"containerClass":{"required":false,"tsType":{"name":"string"},"description":"Class name for the container. More info: https://getbootstrap.com/docs/4.0/layout/overview/#containers"},"hasActions":{"required":false,"tsType":{"name":"boolean"},"description":"Set `true` if this page uses `<Actions />`, so this component will get enough padding to avoid overlapping of the content."},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: any) => void","signature":{"arguments":[{"name":"event","type":{"name":"any"}}],"return":{"name":"void"}}},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Caret.tsx":{"description":"Caret icon component.","displayName":"Caret","methods":[],"props":{"open":{"required":false,"tsType":{"name":"boolean"},"description":"Indicates if open or not."},"mirrored":{"required":false,"tsType":{"name":"boolean"},"description":"By default the caret points to the right when closed. Set mirrored and it will point to the left."},"className":{"required":false,"tsType":{"name":"string"},"description":""}},"exampleCode":"import React from \"react\";\r\nimport Caret from \"../../components/Caret\";\r\n\r\nclass CaretExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => this.setState({ isOpen: !this.state.isOpen })}\r\n                >\r\n                    <Caret\r\n                        open={this.state.isOpen}\r\n                    />\r\n                    {\" \"}<span>Click to toggle the caret</span>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaretExample;"},"src\\components\\DocumentView.tsx":{"description":"Tries to display content in an iframe. When the content can't displayed in an iframe, it will show a download button instead.","displayName":"DocumentView","methods":[],"props":{"src":{"required":false,"tsType":{"name":"string"},"description":"Source of the content (URL)","defaultValue":{"value":"\"about:blank\"","computed":false}},"content":{"required":false,"tsType":{"name":"string"},"description":"Instead of a source, you can also set the content directly (HTML)"},"mimeType":{"required":true,"tsType":{"name":"string"},"description":"MIME type of the content (e.g. \"application/pdf\")"},"showDocumentLabel":{"required":false,"tsType":{"name":"string"},"description":"Label for the button to display","defaultValue":{"value":"\"Show document\"","computed":false}}},"exampleCode":"import React from \"react\";\r\nimport DocumentView from \"../../components/DocumentView\";\r\n\r\nclass DocumentViewExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DocumentView\r\n                    src=\"https://www.pdf995.com/samples/pdf.pdf\"\r\n                    mimeType=\"application/pdf\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DocumentViewExample;"},"src\\components\\DropdownMenuItem.tsx":{"description":"Dropdown with button for sidebar.","displayName":"DropdownMenuItem","methods":[],"props":{"to":{"required":false,"tsType":{"name":"string"},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":""},"label":{"required":false,"tsType":{"name":"any"},"description":""},"isActive":{"required":false,"tsType":{"name":"boolean"},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}},"exampleCode":"import React from \"react\";\r\nimport MenuItem from \"../../components/MenuItem\";\r\nimport DropdownMenuItem from \"../../components/DropdownMenuItem\";\r\n\r\n\r\nclass DropdownMenuItemExample extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"blue-app-sidebar position-relative\" style={{ top: \"0\" }}>\r\n                <DropdownMenuItem to=\"#\" label=\"DropdownMenuItem\" icon=\"bi-home\">\r\n                    <MenuItem href=\"#\" label=\"MenuItem\"></MenuItem>\r\n                </DropdownMenuItem>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DropdownMenuItemExample;"},"src\\components\\FluentBtn.tsx":{"description":"Shortcut for `<button class=\"fluent-btn\"><div className=\"fluent-btn-ball\"></div></button>`.\r\nButton with a fancy and fluent acrylic effect.","displayName":"FluentBtn","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":"Content of the button. You can also set all other props you would give a button or a link."},"className":{"required":false,"tsType":{"name":"string"},"description":""},"href":{"required":false,"tsType":{"name":"string"},"description":"If set, it will be an `<a>` element. Otherwise it will be a `<button>`."},"light":{"required":false,"tsType":{"name":"boolean"},"description":"Can be set for buttons with white background. The glow will be a little bit darker than."},"type":{"required":false,"tsType":{"name":"string"},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":""},"style":{"required":false,"tsType":{"name":"any"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e?: any) => void","signature":{"arguments":[{"name":"e","type":{"name":"any"}}],"return":{"name":"void"}}},"description":""}},"exampleCode":"import React from \"react\";\r\nimport Utilities from \"../../components/Utilities\";\r\nimport FluentBtn from \"../../components/FluentBtn\";\r\n\r\nclass FluentBtnExample extends React.Component {\r\n    componentDidMount() {\r\n        // Beim normalen Einsatz innerhalb von <Page /> ist folgendes nicht nötig. Nur, wenn <FluentBtn /> z.B. asynchron eingebunden wird.\r\n        Utilities.registerFluentBtns();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FluentBtn\r\n                    className=\"btn btn-primary btn-lg\"\r\n                >\r\n                    Hover over this button and see the fancy fluent effect\r\n                </FluentBtn>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FluentBtnExample;"},"src\\components\\Grid.tsx":{"description":"The main component. As soon this component is mounted, it is globally available under `window.blueGridRef`.\r\nAlso you can append your own event listeners with `blueGridRef.addEventListener(eventName, (prevProps, prevState) => { })`.\r\n\r\nAllowed event listeners:\r\n\r\n* **componentDidUpdate** - Component was updated.  \r\n  Example: `blueGridRef.addEventListener(\"componentDidUpdate\", (prevProps, prevState) => { })`\r\n* **pageDidShowAgain** - Page appeared again with the same old state. In the callback function you can reinitialize things.  \r\n  Example: `blueGridRef.addEventListener(\"pageDidShowAgain\", \"home\", (prevProps, prevState) => { })`\r\n* **pageDidHide** - This page disappeared and another page appears instead.  \r\n  Example: `blueGridRef.addEventListener(\"pageDidHide\", \"home\", (prevProps, prevState) => { })`","displayName":"Grid","methods":[{"name":"defaultProps","docblock":null,"modifiers":["static","get"],"params":[],"returns":null},{"name":"toggleSidebar","docblock":null,"modifiers":[],"params":[{"name":"event","type":{"name":"any"}}],"returns":null},{"name":"hideSidebar","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null},{"name":"initMatch","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"addEventListener","docblock":null,"modifiers":[],"params":[{"name":"param1","type":{"name":"any"}},{"name":"param2","type":{"name":"any"}},{"name":"param3","type":{"name":"any"}}],"returns":null}],"props":{"id":{"required":false,"tsType":{"name":"string"},"description":""},"sidebarIn":{"required":false,"tsType":{"name":"boolean"},"description":""},"style":{"required":false,"tsType":{"name":"CSSProperties"},"description":""},"expandSidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Sidebar is automatically expanded on wider views.","defaultValue":{"value":"false","computed":false}},"hideSidebarMenu":{"required":false,"tsType":{"name":"boolean"},"description":"Disables sidebar.","defaultValue":{"value":"false","computed":false}},"pages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{ name: string; component: JSX.Element }","signature":{"properties":[{"key":"name","value":{"name":"string","required":true}},{"key":"component","value":{"name":"JSX.Element","required":true}}]}}],"raw":"{ name: string; component: JSX.Element }[]"},"description":"Registers pages for the built-in routing system. Example: `[{name: \"home\", component: <HomePage />}]`"},"unrouteable":{"required":false,"tsType":{"name":"boolean"},"description":"When `true`, always the \"home\" route will be rendered.","defaultValue":{"value":"false","computed":false}},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends `className`."},"disableTitleSet":{"required":false,"tsType":{"name":"boolean"},"description":"By default, the document title will automatically set. Set this prop to `true` to disable this behaviour.","defaultValue":{"value":"false","computed":false}},"sidebarToggleIconComponent":{"required":false,"tsType":{"name":"any"},"description":"If you don't use blueicon, you can define another icon element for the sidebar toggle button.","defaultValue":{"value":"<span className=\"bi-menu\" />","computed":false}},"statusIcons":{"required":false,"tsType":{"name":"signature","type":"object","raw":"{\r\n    danger: any,\r\n    info: any,\r\n    success: any,\r\n    warning: any\r\n}","signature":{"properties":[{"key":"danger","value":{"name":"any","required":true}},{"key":"info","value":{"name":"any","required":true}},{"key":"success","value":{"name":"any","required":true}},{"key":"warning","value":{"name":"any","required":true}}]}},"description":"Will replace status icons with custom ones. This will also overwrite the `useBlueicons` option.\r\nThis can be a SVG component or a normal element component.","defaultValue":{"value":"{\r\n    danger: <span className=\"bi-error\" />,\r\n    info: <span className=\"bi-information\" />,\r\n    success: <span className=\"bi-check\" />,\r\n    warning: <span className=\"bi-sign_warning\" />\r\n}","computed":false}},"disableHeaders":{"required":false,"tsType":{"name":"boolean"},"description":"Disables the header bars on pages."}}},"src\\components\\Header.tsx":{"description":"The top of a page.","displayName":"Header","methods":[],"props":{"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\HeaderActions.tsx":{"description":"@deprecated This component isn't neccessary anymore. Just use `ActionMenu` directly in `Header`.","displayName":"HeaderActions","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"breakpoint":{"required":false,"tsType":{"name":"breakOption"},"description":"@deprecated Use `break` prop instead."},"break":{"required":false,"tsType":{"name":"breakOption"},"description":""},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\HeaderTitle.tsx":{"description":"The title area at the header bar.\r\nDepending on its content, the document's title will be set aswell (what will be shown in the browser title bar).","displayName":"HeaderTitle","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"appTitle":{"required":false,"tsType":{"name":"string"},"description":"Text next to the logo."},"keepAppTitle":{"required":false,"tsType":{"name":"boolean"},"description":"Disables that the app title will disappear at a specific view width."},"children":{"required":false,"tsType":{"name":"any"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":"Extends `className` from parent element."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is the component used on the sidebar?"}}},"src\\components\\Intro.tsx":{"description":"Can be used for a sign-in page.","displayName":"Intro","methods":[],"props":{"logo":{"required":false,"tsType":{"name":"string"},"description":"Can be an image. Will be placed inside of the `src` attribute."},"logoMaxWidth":{"required":false,"tsType":{"name":"string"},"description":"Max width from the logo.","defaultValue":{"value":"\"100px\"","computed":false}},"title":{"required":false,"tsType":{"name":"string"},"description":"Text which will be placed under the logo."},"children":{"required":false,"tsType":{"name":"any"},"description":"Content"}}},"src\\components\\MenuItem.tsx":{"description":"Link, button or custom component for Sidebar, Actions or ActionMenu","displayName":"MenuItem","methods":[],"props":{"to":{"required":false,"tsType":{"name":"string"},"description":"Sets `to` prop, e.g. when you use the `NavLink` component from React Router."},"exact":{"required":false,"tsType":{"name":"boolean"},"description":"Prop for components by React Router."},"href":{"required":false,"tsType":{"name":"string"},"description":""},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"}}],"return":{"name":"void"}}},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":"Icon component or a class name."},"label":{"required":false,"tsType":{"name":"any"},"description":"Label of the link."},"isActive":{"required":false,"tsType":{"name":"boolean"},"description":"Should be set as active."},"isHome":{"required":false,"tsType":{"name":"boolean"},"description":"When using Blue React's routing system: define this link as home page link."},"dropdownClassName":{"required":false,"tsType":{"name":"string"},"description":"Extends class name of the dropdown menu."},"children":{"required":false,"tsType":{"name":"any"},"description":"Set children to create a nested `MenuItem` as a dropdown."},"className":{"required":false,"tsType":{"name":"any"},"description":"Defines class name."},"showDropdown":{"required":false,"tsType":{"name":"boolean"},"description":"Defines dropdown status from outside."},"supportOutside":{"required":false,"tsType":{"name":"boolean"},"description":"Close on click outside."},"elementType":{"required":false,"tsType":{"name":"any"},"description":"By default, MenuItem is a `\"button\"</button>. If you set a `href`, it's a `\"a\"`.\r\nIf you want to have it another type, you can pass a component reference with this prop (e.g. `Link`)."},"target":{"required":false,"tsType":{"name":"string"},"description":""},"rel":{"required":false,"tsType":{"name":"string"},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":""}}},"src\\components\\Outside.tsx":{"description":"Component that fires an event if you click outside of it","displayName":"Outside","methods":[],"props":{"children":{"required":true,"tsType":{"name":"any"},"description":""},"className":{"required":false,"tsType":{"name":"string"},"description":""},"onClickOutside":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: MouseEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"MouseEvent"}}],"return":{"name":"void"}}},"description":""}}},"src\\components\\Page.tsx":{"description":"Main component for each page.","displayName":"Page","methods":[],"props":{"title":{"required":false,"tsType":{"name":"string"},"description":"Will be set to the document's `<title>` tag."},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Search.tsx":{"description":"A search bar that can be placed to the sidebar or on a page.","displayName":"Search","methods":[],"props":{"autoFocus":{"required":false,"tsType":{"name":"boolean"},"description":""},"body":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of a page?"},"className":{"required":false,"tsType":{"name":"string"},"description":""},"icon":{"required":false,"tsType":{"name":"any"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}}],"return":{"name":"void"}}},"description":""},"onSubmit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FormEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactFormEvent","raw":"React.FormEvent"}}],"return":{"name":"void"}}},"description":""},"placeholder":{"required":false,"tsType":{"name":"string"},"description":""},"reset":{"required":false,"tsType":{"name":"boolean"},"description":"Allow reset?"},"resetIcon":{"required":false,"tsType":{"name":"any"},"description":"Define custom icon for the reset button."},"sidebar":{"required":false,"tsType":{"name":"boolean"},"description":"Is component inside of the sidebar?"},"value":{"required":false,"tsType":{"name":"string"},"description":""}},"exampleCode":"import React from \"react\";\r\nimport Search from \"../../components/Search\";\r\n\r\nclass SearchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            search: \"\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    body\r\n                    className=\"w-50\"\r\n                    onChange={({ target }) => this.setState({ search: target.value })}\r\n                    onSubmit={() => alert(\"Do form submit now!\")}\r\n                    placeholder=\"Begin typing...\"\r\n                    reset\r\n                    value={this.state.search}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchExample;"},"src\\components\\SidebarMenu.tsx":{"description":"Sidebar for the `Grid` component.","displayName":"SidebarMenu","methods":[],"props":{"fluent":{"required":false,"tsType":{"name":"boolean"},"description":"Should menu items have a Fluent effect. Default: `true`"},"sidebarClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the sidebar."},"sidebarStyle":{"required":false,"tsType":{"name":"object"},"description":"Sets the `style` prop by the sidebar."},"menuClass":{"required":false,"tsType":{"name":"string"},"description":"Extends the class name by the menu."},"menuStyle":{"required":false,"tsType":{"name":"object"},"description":"Sets the `style` prop by the menu."},"topContent":{"required":false,"tsType":{"name":"any"},"description":"Content on top of the menu."},"bottomContent":{"required":false,"tsType":{"name":"any"},"description":"Content for the bottom part of the sidebar."},"children":{"required":false,"tsType":{"name":"any"},"description":""}}},"src\\components\\Switch.tsx":{"description":"Switch.","displayName":"Switch","methods":[],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"checked":{"required":false,"tsType":{"name":"boolean"},"description":""},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}}],"return":{"name":"void"}}},"description":""},"sliderLabel":{"required":false,"tsType":{"name":"string"},"description":"Sets label inside of the switch. If you set this, you should also set the className \"lg\" to make the switch larger."},"elementType":{"required":false,"tsType":{"name":"string"},"description":"You can change the type of the wrapper element. If you do, the `onChange` event might not be triggered.","defaultValue":{"value":"\"label\"","computed":false}},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":""}},"exampleCode":"import React from \"react\";\r\nimport Switch from \"../../components/Switch\";\r\n\r\nclass SwitchExample extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isChecked: true\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Switch\r\n                    className=\"lg\"\r\n                    checked={this.state.isChecked}\r\n                    onChange={() => this.setState({ isChecked: !this.state.isChecked })}\r\n                    sliderLabel={this.state.isChecked ? \"Yay🎉\" : \"😒\"}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SwitchExample;"}}